 <?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>coderhs &#8211; Red Panthers</title>
	<atom:link href="/author/coderhs/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Experts in Ruby on Rails Development</description>
	<lastBuildDate>Mon, 13 May 2019 23:09:00 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.7</generator>

<image>
	<url>/wp-content/uploads/2017/12/rp-logo.png</url>
	<title>coderhs &#8211; Red Panthers</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</title>
		<link>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/</link>
				<comments>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/#respond</comments>
				<pubDate>Mon, 13 May 2019 23:08:56 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Marketing]]></category>

		<guid isPermaLink="false">/?p=16441</guid>
				<description><![CDATA[<p>Ruby is a programming language with a set of incredibly versatile strengths and applications, with the Ruby on Rails framework helping businesses in countless industries develop powerful and interactive web solutions. While Ruby on Rails provides a world of endless possibilities for quality development, most businesses lack the in house talent to tap into this&#8230;</p>
<p>The post <a rel="nofollow" href="/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/">Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[
<p>
Ruby is a programming language
with a set of incredibly <a href="https://medium.com/kkempin/swot-analysis-of-ruby-on-rails-c421a6c83c09">versatile
strengths and applications</a>,
with the Ruby on Rails framework helping businesses in countless
industries develop powerful and interactive web solutions. While Ruby
on Rails provides a world of endless possibilities for quality
development, most businesses lack the in house talent to tap into
this source of innovation. We proudly fill in the skills-gap for
firms looking to leverage this powerful framework to develop
innovative solutions to a number of challenges.
</p>



<div class="wp-block-image"><figure class="alignright is-resized"><img src="/wp-content/uploads/2019/05/Developers_India_2019-947x1024.png" alt="" class="wp-image-16442" width="341" height="369" srcset="/wp-content/uploads/2019/05/Developers_India_2019-947x1024.png 947w, /wp-content/uploads/2019/05/Developers_India_2019-278x300.png 278w, /wp-content/uploads/2019/05/Developers_India_2019-768x830.png 768w, /wp-content/uploads/2019/05/Developers_India_2019.png 1480w" sizes="(max-width: 341px) 100vw, 341px" /></figure></div>



<p>Through our work developing quality web solutions, we have started to garner some industry recognition. We are excited to share that we have been included on Clutch’s directory of the top <a href="https://clutch.co/in/developers/ruby-rails">Ruby developers</a> in India, thanks to a recent research effort on a wide variety of service industries in India. We outranked more than 100 of our competitors as we started our climb to become a top firm in our field.</p>



<p>The
research effort we were the subject of included factors such as
marketing presence, previous work, and most importantly, client
reviews. We have a rating of 4.8 out of 5 stars thanks to what our
clients have shared with us, mostly reviews like this,</p>



<p>“<em>Red Panthers is a team of highly skilled and passionate engineers who strive to solve problems in eloquent ways. They were eager to learn and train their team on how to improve. They knew how to solve some problems, and when tougher problems arose, we all worked together to find solutions that worked well for everyone</em>.” &#8211; <strong>Founder, Devato Inc</strong> </p>



<p>Reviews
like this help us identify our strengths, weaknesses, and how we are
performing for our clients. We eagerly await whatever else our
clients will share with us.</p>



<p>In
addition to our presence on Clutch, we are included on their
sister-site, The Manifest, as one of the top <a href="https://themanifest.com/in/web-development/companies">web
developers in India</a>.
The Manifest helps firms of all shapes and sizes address a wide array
of industry challenges by providing curated insights and advice. Our
inclusion on their platform as a top firm is due to a number of
factors, namely the quality of our work and our affordability. We are
grateful to be listed as a top development team on two different
industry resources, and we decided to go for a third. We have joined
other expert firms in creating a profile on Visual Objects, a
portfolio sharing platform for <a href="https://visualobjects.com/in/software-development/top-custom-software-developers">developers</a>,
designers, and other innovators alike.</p>



<p>We
are hopeful that our status as a trusted development team will only
grow from here, and we are grateful for all of the recognition we
have received. Thank you to everyone who played a part in our
success, we could not have done this alone, and we cannot wait to see
what new challenges you have for us.</p>
<p>The post <a rel="nofollow" href="/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/">Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Crystal tuples: the immutable data structure of crystal</title>
		<link>/tuples-immutable-data-crystal/</link>
				<comments>/tuples-immutable-data-crystal/#comments</comments>
				<pubDate>Wed, 06 Dec 2017 13:47:11 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[crystal]]></category>
		<category><![CDATA[basics]]></category>
		<category><![CDATA[crystal 101]]></category>
		<category><![CDATA[fp]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[immutable datastructure]]></category>
		<category><![CDATA[newbie]]></category>
		<category><![CDATA[tuple]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3985</guid>
				<description><![CDATA[<p>Tuple is a data structure which has immutable elements and is of a fixed size. Its similar to an array, but unlike arrays in crystal and ruby which allows adding more values over time a tuple is of fixed and cannot change. (Disclaimer: This article is meant for Ruby developer and explaining what a tuple&#8230;</p>
<p>The post <a rel="nofollow" href="/tuples-immutable-data-crystal/">Crystal tuples: the immutable data structure of crystal</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><strong>Tuple</strong> is a data structure which has immutable elements and is of a fixed size. Its similar to an array, but unlike arrays in crystal and ruby which allows adding more values over time a tuple is of fixed and cannot change. (Disclaimer: This article is meant for Ruby developer and explaining what a tuple is to a ruby developer).</p>
<p>In crystal we have two types of tuple</p>
<p>1) Tuple <code>{1, "hello", :world}</code><br />
2) NamedTuple <code>{x: 1, y:2, z: 5}</code></p>
<p>They are immutable, which means if you try changing the value of an element in a tuple you will get an exception. Since crystal programs are compiled before execution you will get to see these errors while you compile the program itself.</p>
<p>example:</p><pre class="crayon-plain-tag">x = {1, 2, 3}

# to get the value use
x[0]</pre><p>If you try assigning a value to it, like so</p><pre class="crayon-plain-tag">x[0] = 10</pre><p>You will get an exception like bellow.</p><pre class="crayon-plain-tag">undefined method '[]=' for Tuple(Int32, Int32)</pre><p>In crsytal, tuples are the preferred way to return a multiple results from a method.</p>
<p><strong>For example</strong> inside the crystal core we have a method to get the minimum and maximum of an array.</p><pre class="crayon-plain-tag">(1..100).minmax</pre><p>the result would be <strong>{1, 100}</strong></p>
<blockquote><p>Note: Since we just mentioned <strong>minmax</strong>, have a look at <strong>minmax_by</strong> method as well.<b> </b>It would let you apply a block of code over your range and then return the minimum and maximum based on the returned collection.</p><pre class="crayon-plain-tag">["1234", "12", "123"].minmax_by { |i| i.size }
# =&gt; {"12", "1234"}</pre><p>
</p></blockquote>
<p>Advantage of using tuple to return results instead of something like hash, is that we can be sure that our result cannot be altered accidentally. (since the data structure is immutable) ?</p>
<p><strong>You can build a tuple from an array by using the <code>.from</code> method</strong></p><pre class="crayon-plain-tag">Tuple(Int32, Int32).from([1, 2])</pre><p>As a developer, the place where we use tuple the most in crystal are with splats(symbol: *). Passing arguments to method using splat and double splat operator is something we use widely in ruby keep our code small and readable. So if you wish to do the same in crystal you need to make a tuple not a hash or array.</p>
<p>If you use splat on an array directly like <code>test(*[1,2])</code> it would return an error</p><pre class="crayon-plain-tag">argument to splat must be a tuple, not Array(Int32)</pre><p>So to achieve the same effect as a splat with array in crystal we would need to do <code>test(*{1,2})</code></p>
<h2>Named Tuple</h2>
<p>Named Tuple are everything as above, but with a name for each element. Named Tuple looks like <code>{x: 1, y:2}</code> it gives more meaning to our tuple. Like the above you can access the values but not change them.</p><pre class="crayon-plain-tag">data = {x: 1, y: 2}

# to get the value
data[:x]

# raises errors when we try to change it
data[:x] = 1</pre><p>Double splats are meant for Named Tuple where in we can pass in the values for a particular argument using named tuple and double splat.</p><pre class="crayon-plain-tag">def print_date(year = nil, month = nil, day = nil)
  puts "#{year}/#{month}/#{day}"
end

birth_day = { year: 1990, month: 4, day: 3}

print_date(**birth_day)

card_expiry = { year: 2020, month: 1}

print_date(**card_expiry)</pre><p>You can build a NamedTuple from a hash.</p><pre class="crayon-plain-tag">NamedTuple(name: String, val: String).from({"name" =&gt; "number", "val" =&gt; "Harisankar P S"}</pre><p><strong>Note:</strong> Crystal has a nifty feature called Union types (a variable can store data of multiple data types), so if it happen to pass such a variable to a named tuple/tuple, it will still check for the exact type that we want if the data is not in that variable then an exception would be raised</p>
<p>Example</p><pre class="crayon-plain-tag">k = 42.as(Int32 | String)
NamedTuple(name: String, val: String).from({"name" =&gt; "number", "val" =&gt; K}</pre><p>Exception:</p><pre class="crayon-plain-tag">cast from Int32 to String failed, at /usr/local/Cellar/crystal-lang/0.23.1_1/src/class.cr:41:5:41 (TypeCastError)
0x10e8f1085: *CallStack::unwind:Array(Pointer(Void)) at ??
0x10e8f1021: *CallStack#initialize:Array(Pointer(Void)) at ??
0x10e8f0ff8: *CallStack::new:CallStack at ??
0x10e8ec295: *raise&lt;TypeCastError&gt;:NoReturn at ??
0x10e90feb8: *String@Object::cast&lt;(Int32 | String)&gt;:String at ??
0x10e95faa3: *NamedTuple(name: String:Class, val: String:Class)@NamedTuple(T)#from&lt;Hash(String, Int32 | String)&gt;:NamedTuple(name: String, val: String) at ??
0x10e95f787: *NamedTuple(name: String, val: String)@NamedTuple(T)::from&lt;Hash(String, Int32 | String)&gt;:NamedTuple(name: String, val: String) at ??
0x10e8ef8a6: *__icr_exec__:NamedTuple(name: String, val: String) at ??
0x10e8db130: __crystal_main at ??
0x10e8ee578: main at ??</pre><p></p>
<h2><strong>Extra Note:</strong></h2>
<p><span style="font-size: 16px;">If you put a splat before method argument and pass in arguments, they will be converted to a tuple</span></p><pre class="crayon-plain-tag">def a_method(*data)
  puts data
end

a_method(1,2,3)
#=&gt; {1,2,3}</pre><p>If you put a double splat before method argument and pass in data as keyword argument it gets converted to a NamedTuple</p><pre class="crayon-plain-tag">def a_method(**data)
  puts data
end

a_method(x: 1, y: 10)
#=&gt; {x: 1, y: 10}</pre><p>&nbsp;</p>
<h3>To summarize:</h3>
<ul>
<li>Tuples are immutable data structure</li>
<li>Regular tuple is like a frozen array</li>
<li>You can use splat only with a tuple</li>
<li>NamedTuple is like a frozen hash</li>
<li>Double splat can only be used with NamedTuple</li>
</ul>
<p>The post <a rel="nofollow" href="/tuples-immutable-data-crystal/">Crystal tuples: the immutable data structure of crystal</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/tuples-immutable-data-crystal/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Using mina to deploy a particular commit</title>
		<link>/using-mina-deploy-particular-commit/</link>
				<comments>/using-mina-deploy-particular-commit/#respond</comments>
				<pubDate>Sun, 10 Sep 2017 06:24:45 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[DevOps]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3522</guid>
				<description><![CDATA[<p>Mina is our tool of choice when it comes to automating our deployment. It might not be the best tool out there, but it is enough to get us started. Single server or multi server, we love Mina. In most of uses cases if something fail in production we just need to rollback to one&#8230;</p>
<p>The post <a rel="nofollow" href="/using-mina-deploy-particular-commit/">Using mina to deploy a particular commit</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Mina is our tool of choice when it comes to automating our deployment. It might not be the best tool out there, but it is enough to get us started. Single server or multi server, we love Mina.</p>
<p>In most of uses cases if something fail in production we just need to rollback to one or two version before to it. But recently we had a case in which we had to revert to version order than the previous 5 version (5 is default no of versions stored). The quick thing that we did at that point is copy of master called temp-master branch and changed master to the version that we wanted and had the new master deployed.</p>
<p>We didn&#8217;t like that solution much, so we decided to look for a cleaner solution. Looking at the source code of the git task inside mina, we found that mina had an option to deploy a particular git commit. The config was <code>set :commit, HASH</code> (Thee cheers to the contributors to mina for having that).</p>
<p>Now that made our life easier for the future. We just added the following line to our deploy.rb</p>
<p><code>set :commit, ENV['COMMIT']</code></p>
<p>so now we can deploy a particular hash by passing that hash as an environment variable.</p>
<p><code>mina deploy COMMIT=thegitcommithash</code></p>
<p>note: If no hash is passed (eg: <code>mina deploy</code>), it would just deploy the master.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/using-mina-deploy-particular-commit/">Using mina to deploy a particular commit</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/using-mina-deploy-particular-commit/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>securing and showing a redis server to the world</title>
		<link>/securing-and-showing-a-redis-server-to-the-world/</link>
				<comments>/securing-and-showing-a-redis-server-to-the-world/#respond</comments>
				<pubDate>Fri, 25 Aug 2017 13:05:34 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3193</guid>
				<description><![CDATA[<p>Redis is an in memory based key value data structure server. They keywords here are in-memory (RAM) and Key &#8211; Value (Hash). RAM being the easily accessible memory location for your CPU, and hash being the most accissable data-structure a combination of both makes it lethal. It was developed by an Italian developer named Salvatore Sanfilippo, in&#8230;</p>
<p>The post <a rel="nofollow" href="/securing-and-showing-a-redis-server-to-the-world/">securing and showing a redis server to the world</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<div style="width: 1290px" class="wp-caption aligncenter"><img class="size-full" src="https://upload.wikimedia.org/wikipedia/en/thumb/6/6b/Redis_Logo.svg/1280px-Redis_Logo.svg.png" alt="redis logo" width="1280" height="428" /><p class="wp-caption-text">Redis</p></div>
<p>Redis is an in memory based key value data structure server. They keywords here are in-memory (RAM) and Key &#8211; Value (Hash). RAM being the easily accessible memory location for your CPU, and hash being the most accissable data-structure a combination of both makes it lethal. It was developed by an Italian developer named <a href="http://antirez.com/">Salvatore Sanfilippo</a>, in 2009.</p>
<p>Such a system is useful in multiple scenarios. Especially in cases where key is readily available, constant and not changing. Some example use cases being. In a rails projects Redis is used at multiple places for example:</p>
<ul>
<li>Backend of action cable which is used to provide notifications (pub/sub)</li>
<li>Queue system used by background workers (Sidekiq, Resque)</li>
<li>Web Caching</li>
<li>Session Store &#8211; sharing user session across all the load balanced servers</li>
<li>Fast accessible meta data catalog for your inventory or tool</li>
<li>Counting &#8211; Redis offers a fast method to increment and decrement value. Being an in-memory storage does add</li>
</ul>
<p>&nbsp;</p>
<p>Coming back to the topic of this article, most self hosted rails applications starts off by installing redis in the same server as your rails application. In fact sidekiq, crontab (for scheduling tasks) would all be on the same server. Over time as your projects grows with users you would see that your application is slowing dow, CPU spiking to 100%, etc. We can start fixing that by moving sidekiq and the cron to another server (like how its done in heroku). But the first thing we need to make is the redis on our main server open to the second server and secure it.</p>
<p>The steps to be followed are:</p>
<p><strong>To open up your redis to the world.</strong></p>
<p>Go to <code>/etc/redis/redis.conf</code> find the following line <code>bind 127.0.0.1</code>, by removing that line you will make your redis application accessable to the world through the default port <code>6379</code> . You can also set for the world by placing the ip as <code>0.0.0.0</code>. Lets remove it for now, as we will be securing it in our firewall (since my example is the AWS i would be doing that in the security group). If you don&#8217;t have a security group then add the ip of the servers connecting to it after a space <code>bind 127.0.0.1 192.168.1.1</code></p>
<p><strong>Disable Protective mod</strong></p>
<p>Since 3.2.0 redis comes with a default <code>protective-mode yes</code> that make it accepts query and request only from loopback (the machine itself). It was enables so as most people would install redis and have it exposed to the world (redis has limited security in itself, its expected for the system admin to take care of the necessary arrangements). So we need to turn it off. Find the line saying <code>protective-mode</code> and the set it to <code>no</code></p>
<p><strong>Set a password for your instance</strong></p>
<p>As a final step we can set a password to access redis. To set that find the like that says <code>requirepass</code> and after that word provide your password : <code>requirepass iwouldbeafooltosharemyrealpassword</code></p>
<p>&nbsp;</p>
<p><strong>SET the IP of your secondary server in your security group</strong></p>
<p>For all those who uses AWS, like us. You need to open up this particular port in your machine, but do not make it accessable to all the IPs. Redis doesn&#8217;t have user permissions so basically if anyone were to get access they could just do a FLUSHALL and you will loose all your data.</p>
<p>So open the port <code>6379</code> in your security group or IP tables (if you are in just a linux server) to the IP of the clients you want to connect. You can read about security group here -&gt; <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html</a></p>
<p>With the above 4 steps you would have opened up your existing redis installed in your main server to the secondary new server. You can further add more machines by adding their IP to security group/ IP Tables.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/securing-and-showing-a-redis-server-to-the-world/">securing and showing a redis server to the world</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/securing-and-showing-a-redis-server-to-the-world/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>[Tip] Mina: Find last git commit released</title>
		<link>/tip-mina-find-last-git-commit-released/</link>
				<comments>/tip-mina-find-last-git-commit-released/#respond</comments>
				<pubDate>Wed, 24 May 2017 07:43:31 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[DevOps]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=2499</guid>
				<description><![CDATA[<p>A project that we were handling hadn&#8217;t had a deployment in some time. So we were confused on what all commits were going to go to production ( bad karma for us for not keeping a release or change log). We use mina for all our deployment as we found it to be faster that&#8230;</p>
<p>The post <a rel="nofollow" href="/tip-mina-find-last-git-commit-released/">[Tip] Mina: Find last git commit released</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>A project that we were handling hadn&#8217;t had a deployment in some time. So we were confused on what all commits were going to go to production ( bad karma for us for not keeping a release or change log). We use <a href="https://github.com/mina-deploy/mina">mina</a> for all our deployment as we found it to be faster that Capistrano. So we were sure that there would be something on our server to help us settle this dilemma. We finally solved this by going through the various folders and files.</p>
<p>Edit the file inside the file with your branch name located at <strong>/path/to/project/</strong>scm<strong>/refs/heads</strong>. Like for example if you have your project in <strong>/var/www</strong> folder and you are deploying master then you should edit the file called master found at the following location.<code><strong>/var/www/project/</strong>scm<strong>/refs/heads/master</strong></code> that file would have only one line and that&#8217;s the last git commit released.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/tip-mina-find-last-git-commit-released/">[Tip] Mina: Find last git commit released</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/tip-mina-find-last-git-commit-released/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Materialized Views: Caching database query</title>
		<link>/materialized-views-caching-database-query/</link>
				<comments>/materialized-views-caching-database-query/#comments</comments>
				<pubDate>Wed, 30 Nov 2016 09:22:46 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Database]]></category>
		<category><![CDATA[PostgreSQL]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[Materialized]]></category>
		<category><![CDATA[optimization]]></category>
		<category><![CDATA[SQL]]></category>
		<category><![CDATA[Views]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=728</guid>
				<description><![CDATA[<p>As a part of our database optimization series, this article is related to creating materializing views in the database. Before starting with a materialized view, let&#8217;s talk about database views. What is a database view? A database view is a stored set of queries, which gets executed whenever a view is called or evoked. Unlike the&#8230;</p>
<p>The post <a rel="nofollow" href="/materialized-views-caching-database-query/">Materialized Views: Caching database query</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>As a part of our database optimization series, this article is related to creating materializing views in the database.</p>
<div style="width: 1152px" class="wp-caption alignnone"><img class="size-full" src="https://i-msdn.sec.s-msft.com/dynimg/IC709528.png" alt="Materialzied View" width="1142" height="487" /><p class="wp-caption-text">Materialized View Purpose</p></div>
<p>Before starting with a materialized view, let&#8217;s talk about database views.</p>
<h2>What is a database view?</h2>
<p>A database view is a stored set of queries, which gets executed whenever a view is called or evoked. Unlike the regular tables, the view doesn&#8217;t occupy any physical space in your hard disk but its schema and everything is stored in the system memory. It helps abstract away the underlying tables and makes it easier to work with.</p>
<p>They can also be called as pseudo tables.</p>
<p>Quoted from the PostgerSQL documentation.</p>
<blockquote><p>Making liberal use of views is a key aspect of good SQL database design. Views allow you to encapsulate the details of the structure of your tables, which might change as your application evolves, behind consistent interfaces.</p>
<p>&nbsp;</p></blockquote>
<p></p><pre class="crayon-plain-tag">CREATE VIEW company_manager AS
SELECT id, name, email
FROM  companies
WHERE role='manager';</pre><p>Now to access all the managers</p><pre class="crayon-plain-tag">SELECT * FROM company_managers;</pre><p>&nbsp;</p>
<p>Making more use of views makes your DB design much cleaner, but here we are talking more about using Materializing views. As that would lead to the more direct performance boost.</p>
<h2>So what is a Materialized view?</h2>
<p>The materializing view was first introduced in oracle. But now you can find it in most database systems like PostgreSQL, MicrosoftSQL server, IBM DB2, Sybase. MySQL doesn&#8217;t have native support for it, but you can find extensions for it which would help achieve this</p>
<p><strong>Materialized view </strong>is also called <strong>Matview. </strong>It is a form of database view that also has the result of the query as well. Which speeds up the results because now, you don&#8217;t have to run the query to get the results, as its already there, calculated. Of course, there are cases where we can&#8217;t have this, where we need more real-time information. But while generating reports you create a matview and then later refresh the matview to get the updated reports.</p>
<p>Things to note about matview are:</p>
<ol>
<li>It&#8217;s read-only (pseudo-table) so you can&#8217;t update it.</li>
<li>You need to refresh the table to get the latest data.</li>
<li>While refreshing, it would block other connections to access the existing data from the material view, so you need to make the refresh run concurrently</li>
</ol>
<h2>So why use Materialized views in Rails?</h2>
<ul>
<li>Capture commonly used joins &amp; filters.</li>
<li>Push data intensive processing from Ruby to Database.</li>
<li>Allow fast and live filtering of complex associations or calculation fields.</li>
</ul>
<h2>How do you use it in Rails?</h2>
<p>Well thanks to active record, it&#8217;s quite easy to use this in our code. But we need a bit of SQL as well.</p>
<p>First, we add the migration to create the materialized views.</p><pre class="crayon-plain-tag">bundle exec rails g migration create_all_time_sales_mat_view</pre><p>In the migration file, we add the SQL</p><pre class="crayon-plain-tag">class CreateAllTimesSalesMatView &lt; ActiveRecord::Migration
  def up
    execute &lt;&lt;-SQL
      CREATE MATERIALIZED VIEW all_time_sales_mat_view AS
        SELECT sum(amount) as total_sale,
        DATE_TRUNC('day', invoice_adte) as date_of_sale
      FROM sales
      GROUP BY DATE_TRUNC('day', invoice_adte)
    SQL
  end

  def down
    execute("DROP MATERIALIZED VIEW IF EXISTS all_time_sales_view")
  end
end</pre><p>Once the view is ready , we can create the model for this at <code>app/models/all_time_sales_mat_view.rb</code></p><pre class="crayon-plain-tag">class AllTimeSalesMatView &lt; ActiveRecord::Base
  self.table_name = 'all_time_sales_mat_view'

  def readonly?
    true
  end

  def self.refresh
    ActiveRecord::Base.connection.execute('REFRESH MATERIALIZED VIEW CONCURRENTLY all_time_sales_mat_view')
  end
end</pre><p>Now we select and query the model as usual.</p><pre class="crayon-plain-tag">AllTimeSalesMatView.select(:date_of_sale)
AllTimeSalesMatView.sum(:total_sale)</pre><p>We can&#8217;t do any <code>create</code>, <code>save</code> or <code>update</code>. As its a read-only table.</p>
<p>Creating a table with a total of million sales record for every date in the last year, gave us the following speed improvement.</p><pre class="crayon-plain-tag">Regular
       user     system      total        real
     (976.4ms)  0.020000   0.000000   0.020000 (  0.990258)
MatiView
     (2.3ms)    0.000000   0.010000   0.010000 (  0.012010)</pre><p>Over 10 times speed improvement, yay!!</p>
<h2>Summarize</h2>
<h3>Good Points</h3>
<ul>
<li>Faster to fetch data.</li>
<li>Capture commonly used joins &amp; filters.</li>
<li>Push data intensive processing from Ruby to Database.</li>
<li>Allow fast and live filtering of complex associations or calculation .fields.</li>
</ul>
<h3>Pain Points</h3>
<ul>
<li>To alter table we need to write SQL</li>
<li>We will be using more RAM and Storage</li>
<li>Requires Postgres 9.3 for MatView</li>
<li>Requires Postgres 9.4 to refresh concurrently</li>
<li>Can&#8217;t have Live data
<ul>
<li>You can fix this by creating your own MatViewTable and updating it with the latest information</li>
</ul>
</li>
</ul>
<h2>References</h2>
<ul>
<li>https://www.postgresql.org/docs/9.3/static/rules-materializedviews.html</li>
<li>http://en.wikipedia.org/wiki/Materialized_view</li>
<li>http://dev.mysql.com/doc/refman/5.7/en/create-view.html</li>
<li>https://blog.pivotal.io/labs/labs/database-views-performance-rails</li>
<li>https://www.sitepoint.com/speed-up-with-materialized-views-on-postgresql-and-rails/</li>
</ul>
<p>The post <a rel="nofollow" href="/materialized-views-caching-database-query/">Materialized Views: Caching database query</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/materialized-views-caching-database-query/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
							</item>
		<item>
		<title>Introduction to generating JSON using PostgreSQL</title>
		<link>/create-json-response-using-postgresql-instead-rails/</link>
				<comments>/create-json-response-using-postgresql-instead-rails/#comments</comments>
				<pubDate>Thu, 24 Nov 2016 04:38:33 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Database]]></category>
		<category><![CDATA[PostgreSQL]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[array]]></category>
		<category><![CDATA[benchmarking]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[Faster]]></category>
		<category><![CDATA[generation]]></category>
		<category><![CDATA[JSON]]></category>
		<category><![CDATA[optimization]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[SQL]]></category>
		<category><![CDATA[standards]]></category>
		<category><![CDATA[web api]]></category>
		<category><![CDATA[XML]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=663</guid>
				<description><![CDATA[<p>Introduction One of the major requirements for any online business is to have a backend that either provides or can be extended to provide an API response. Building  websites with static HTML and simple jquery ajax is coming to an end. In this era, Javascript frameworks rules the market. Hence, it is a good decision for&#8230;</p>
<p>The post <a rel="nofollow" href="/create-json-response-using-postgresql-instead-rails/">Introduction to generating JSON using PostgreSQL</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<h2>Introduction</h2>
<p>One of the major requirements for any online business is to have a backend that either provides or can be extended to provide an API response. Building  websites with static HTML and simple jquery ajax is coming to an end. In this era, Javascript frameworks rules the market. Hence, it is a good decision for the database to support JSON, as JSON is becoming the glue that connects the frontend and backend.</p>
<p>Rails have an inbuilt support for generating JSON, as it&#8217;s our swiss army knife of web development, and encourages the REST URL structure . And its a good choice for building API. It is good enough to a particular point of growth. Very soon you will reach bottlenecks, where you have more requests than you can handle and you have to either spawn up more servers or use some concurrent languages like elixir, go, etc. Before we go to that scale and burn down the existing codebase, we can use database to generate JSON responses for us, which is 10 times faster in generating JSON than Rails (though more verbose).</p>
<p>Since PostgreSQL 9.2, the database has taken a major leap in supporting JSON. The support that PostgreSQL provides can be divided into two</p>
<ul>
<li>Storing data in JSON and JSONB format</li>
<li>Generating JSON results from the query itself</li>
</ul>
<p>In this article, we will talk about generating JSON(an introduction) from the query itself.</p>
<h2>Getting Started</h2>
<p>One of the advantages of using a database to generate JSON is that I have found it fast while generating smaller JSON but much more faster in generating complex JSON. (Note: The speed is in comparison with rails not with respect to the database itself)</p>
<h3><strong>How to generate JSON</strong></h3>
<div></div>
<div>Simplest way to do that is row_to_json()<br />
For example: Query to return user with id 1 as JSON</div>
<div>
<pre class="crayon-plain-tag">select row_to_json(users) from users where id = 1;</pre><br />
Result:<br />
<pre class="crayon-plain-tag">{"id":1,"email":"hsps@redpanthers.co","encrypted_password":"iwillbecrazytodisplaythat",
"reset_password_token":null,"reset_password_sent_at":null,
"remember_created_at":"2016-11-06T08:39:47.983222",
"sign_in_count":11,"current_sign_in_at":"2016-11-18T11:47:01.946542",
"last_sign_in_at":"2016-11-16T20:46:31.110257",
"current_sign_in_ip":"::1","last_sign_in_ip":"::1",
"created_at":"2016-11-06T08:38:46.193417",
"updated_at":"2016-11-18T11:47:01.956152",
"first_name":"Super","last_name":"Admin","role":3}</pre><br />
if you want to send only some specific fields</p>
</div>
<p></p><pre class="crayon-plain-tag">select row_to_json(results)
from (
  select id, email from users
) as results</pre><p>Result</p><pre class="crayon-plain-tag">{"id":1,"email":"hsps@redpanthers.co"}</pre><p>Now let&#8217;s see how to generate more complex JSON with sub JSON, and arrays.</p><pre class="crayon-plain-tag">select row_to_json(result)
from (
  select id, email,
    (
      select array_to_json(array_agg(row_to_json(user_projects)))
      from (
        select id, name
        from projects
        where user_id=users.id
        order by created_at asc
      ) user_projects
    ) as projects
  from users
  where id = 1
) result</pre><p>This would return the JSON response</p><pre class="crayon-plain-tag">{"id":1,"email":"hsps@redpanthers.co", "project":["id": 3, "name": "CSnipp"]}</pre><p>The issue with the above code is that it is more verbose (has more text)  when compared to a ruby code. We need to make sure that while we do a bit of sacrifice there, is worthwhile. So while working with API&#8217;s  use it only where you see a delay in JSON generation.</p>
<p>Similarly ,to the <strong>&#8216;array_agg&#8217;</strong> method that we used above to aggregate values to an array then to JSON, we aggregate them as JSON using <code>json_agg</code>.</p><pre class="crayon-plain-tag">array_to_json(array_agg(row_to_json(user_projects)))</pre><p>can be shortened to</p><pre class="crayon-plain-tag">json_agg(user_projects)</pre><p>&nbsp;</p>
<p>Since the above method of array generation can be tedious, in PostgreSQL 9.4, they have introduced a new method called <code>json_build_object</code>. Simple usage of the function can be as below</p><pre class="crayon-plain-tag">json_build_object('foo',1,'bar',2)</pre><p>which will output</p><pre class="crayon-plain-tag">{"foo": 1, "bar": 2}</pre><p>Also, we can use it to build complex JSON tree by creating functions within the PostgreSQL database. Of course, as we do that, we are moving more and more logic of the code into the DB and we would need to run migrations every time when we want to update a function. So as I said before, we are sacrificing our convenience here .So we should only use this, as the complexity of our JSON generation increases.</p>
<p>I will be covering how to write PostgreSQL functions to help generate more complex JSON structure easier in the second part of this particle.</p>
<h2>References</h2>
<p>https://www.postgresql.org/docs/current/static/functions-json.html<br />
http://bytefish.de/blog/postgresql_json/</p>
<p>The post <a rel="nofollow" href="/create-json-response-using-postgresql-instead-rails/">Introduction to generating JSON using PostgreSQL</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/create-json-response-using-postgresql-instead-rails/feed/</wfw:commentRss>
		<slash:comments>11</slash:comments>
							</item>
		<item>
		<title>New binding.irb introduced in ruby 2.4</title>
		<link>/new-binding-irb-introduced-ruby-2-4/</link>
				<comments>/new-binding-irb-introduced-ruby-2-4/#respond</comments>
				<pubDate>Tue, 22 Nov 2016 05:23:21 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Ruby 2.4]]></category>
		<category><![CDATA[debugging]]></category>
		<category><![CDATA[irb]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[REPL]]></category>
		<category><![CDATA[session]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=636</guid>
				<description><![CDATA[<p>Ruby 2.4 will have the feature to introduce a REPL session, using IRB, in between your code execution for better debugging. IRB, which stands for Interactive Ruby, is the standard REPL which is bundled along with ruby. Pry is a popular alternative for IRB, which has many developer-friendly features like tab compilation and syntax highlighting.&#8230;</p>
<p>The post <a rel="nofollow" href="/new-binding-irb-introduced-ruby-2-4/">New binding.irb introduced in ruby 2.4</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Ruby 2.4 will have the feature to introduce a REPL session, using IRB, in between your code execution for better debugging. <a href="http://ruby-doc.org/stdlib-2.3.0/libdoc/irb/rdoc/IRB.html">IRB</a>, which stands for Interactive Ruby, is the standard REPL which is bundled along with ruby. <a href="http://pryrepl.org/">Pry</a> is a popular alternative for IRB, which has many developer-friendly features like tab compilation and syntax highlighting. One of the most heavily used features of pry is the ability to introduce a REPL session in between your code execution for better debugging. Instead of using <code>p</code> or <code>puts</code> to print the result and various variables, this helps us try out various codes and fixes in between the code to find the right solution.</p>
<div style="width: 635px" class="wp-caption aligncenter"><img src="http://www.alanmacdougall.com/post_content/2012-06-08-interactive-debugging-with-pry/pry_debugging_002.png" width="625" height="377" /><p class="wp-caption-text">binding.pry being used.</p></div>
<p>&nbsp;</p>
<p>To use <code>binding.irb</code> in your code, you need to require the IRB library to your code and call <code>binding.irb</code> where you want to introduce the REPL.</p><pre class="crayon-plain-tag">require 'irb'
# all the codes before the binding
binding.irb
# all the codes after the binding</pre><p>and you will see a REPL like below.</p>
<p><a href="http://blog.redpanthers.co/wp-content/uploads/2016/11/Screen-Shot-2016-11-22-at-10.47.27-AM.png"><img class="alignnone size-full wp-image-637" src="http://blog.redpanthers.co/wp-content/uploads/2016/11/Screen-Shot-2016-11-22-at-10.47.27-AM.png" alt="screen-shot-2016-11-22-at-10-47-27-am" width="715" height="59" /></a></p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/new-binding-irb-introduced-ruby-2-4/">New binding.irb introduced in ruby 2.4</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/new-binding-irb-introduced-ruby-2-4/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Deploying Sidekiq to Ubuntu 16.04</title>
		<link>/deploying-sidekiq-ubuntu-16-04/</link>
				<comments>/deploying-sidekiq-ubuntu-16-04/#respond</comments>
				<pubDate>Mon, 07 Nov 2016 13:56:02 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[DevOps]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[deployment]]></category>
		<category><![CDATA[linux]]></category>
		<category><![CDATA[RVM]]></category>
		<category><![CDATA[ubuntu]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=605</guid>
				<description><![CDATA[<p>Sidekiq is a popular background processing tool available in Ruby. It&#8217;s fast, robust and reliable compared to other solutions out there. Sidekiq run as a process outside of rails (but including the rails environment), which means it doesn&#8217;t start when you start your rails application. During development, we start sidekiq in another terminal (or tab) using&#8230;</p>
<p>The post <a rel="nofollow" href="/deploying-sidekiq-ubuntu-16-04/">Deploying Sidekiq to Ubuntu 16.04</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Sidekiq is a popular background processing tool available in Ruby. It&#8217;s fast, robust and reliable compared to other solutions out there. Sidekiq run as a process outside of rails (but including the rails environment), which means it doesn&#8217;t start when you start your rails application. During development, we start sidekiq in another terminal (or tab) using the command</p><pre class="crayon-plain-tag">bundle exec sidekiq</pre><p>to run it as a daemon we use the -d option</p><pre class="crayon-plain-tag">bundle exec sidekiq -d</pre><p>To kill a sidekiq daemon, you need to do  the PID of the sidekiq process. When a sidekiq process starts it enters its pid to file which can be found at</p><pre class="crayon-plain-tag">/path/to/rails/app/tmp/pid/sidekiq.pid</pre><p>So the command to stop it would be</p><pre class="crayon-plain-tag">pkill -F /path/to/rails/app/tmp/pid/sidekiq.pid</pre><p>But making it a daemon is not a good idea, as there is no code from sidekiq to restart the process when it fails or exits on its own. So in ubuntu, which is our favorite OS for the production server, we make sidekiq a <strong>systemd</strong> process.</p>
<p>Before we make it into a service and if you are using rvm you need to create a wrapper for systemd so that ruby with all the gems are available for it.</p><pre class="crayon-plain-tag">rvm wrapper 2.3.1 systemd bundle</pre><p>Once that is done you need to create a <strong>sidekiq.service</strong> file under your &#8216;<strong>/etc/systemd/system/</strong>&#8216;. You can find the configuration file with default settings <a href="https://github.com/redpanthers/config-files/blob/master/sidekiq/sidekiq.service">here</a>.</p>
<p>&nbsp;</p>
<p>So that was a bit  from me on Sidekiq.Hope it helps you some way in further understanding sidekiq.</p>
<p>The post <a rel="nofollow" href="/deploying-sidekiq-ubuntu-16-04/">Deploying Sidekiq to Ubuntu 16.04</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/deploying-sidekiq-ubuntu-16-04/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Different types of Index in PostgreSQL</title>
		<link>/different-types-index-postgresql/</link>
				<comments>/different-types-index-postgresql/#respond</comments>
				<pubDate>Mon, 19 Sep 2016 07:38:45 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[PostgreSQL]]></category>
		<category><![CDATA[Algorithm]]></category>
		<category><![CDATA[B Tree]]></category>
		<category><![CDATA[BRIN]]></category>
		<category><![CDATA[GiST]]></category>
		<category><![CDATA[Hash]]></category>
		<category><![CDATA[indexing]]></category>
		<category><![CDATA[optimization]]></category>
		<category><![CDATA[part two]]></category>
		<category><![CDATA[series]]></category>
		<category><![CDATA[SP-GiST]]></category>
		<category><![CDATA[Speeing up database]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=549</guid>
				<description><![CDATA[<p>This is part two of our PostgreSQL optimization series. You can read the first article where we discuss when to index here. PostgreSQL uses a different set of algorithm while indexing tables, each type of algorithm is good for a certain set of data. Here we will be discussing the various algorithms available and when&#8230;</p>
<p>The post <a rel="nofollow" href="/different-types-index-postgresql/">Different types of Index in PostgreSQL</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>This is part two of our PostgreSQL optimization series. You can read the first article where we discuss when to index <a href="http://blog.redpanthers.co/optimising-postgresql-database-query-using-indexes/">here</a>.</p>
<p>PostgreSQL uses a different set of algorithm while indexing tables, each type of algorithm is good for a certain set of data. Here we will be discussing the various algorithms available and when we should be using them. (Note these are the algorithms found in PostgreSQL 9.5)</p>
<h2>Algorithms</h2>
<p><strong>B-Tree (Balance Tree),</strong> is the <strong>default</strong> algorithm used when we build indexes in Rails. It keeps a sorted copy of our column, which would be our index. So if we want to find the row of the word starting with <strong>a </strong>then as soon as the words starting with a are over. It will stop searching and return null, as the index has kept everything sorted. It is good in most cases, hence it is the default algorithm used.</p>
<p><strong>Hash </strong>is one of the most popular indexing algorithms. But only the equate operator works on it, thus the query planner will only use an index with a hash algorithm if we do an equal operation searching for it. Another point to note is that Hash index is not WAL (Write Ahead Log) logged, so if the database crash we can&#8217;t rebuild the index and would need to REINDEX the entire column.</p>
<p><strong>GIN</strong>, <strong>Generalized Inverted Indexing</strong> are great for indexing columns and expressions that contain an array, JSON, JSONB, etc. Internally, a <acronym class="ACRONYM">GIN</acronym> index contains a B-tree index constructed over keys, where each key is an element of one or more indexed items and where each tuple in a leaf page contains either a pointer to a B-tree of heap pointers.</p>
<p><strong>GiST</strong>, <strong>Generalized Search Tree</strong> isn&#8217;t a single indexing scheme but rather an abstraction that makes it possible to implement indexing schemes for new data types by providing a balanced tree structure access method. In the past building and implementing custom indexing algorithm for custom data types include an understanding of the internals of the database. With the implementation of GiST, it provides an abstraction of the internal working which can be used to build your own indexing algorithm. It uses B-Tree internally, and thus we can use GiST to index IP address, Geo Location, etc.</p>
<p><strong>SP-GiST</strong>, <strong>Space Partitioned  Generalized Search Tree</strong> &#8211; as the name suggest its GiST implementation itself but instead of balance tree structure we can use one of the non-balanced tree structure such as radix tree, quadtree, k-d tree.</p>
<p><strong>BRIN, Block Range Indexes </strong>are designed to handle very large tables in which the rows’ natural sort order correlates to certain column values. For example, a table storing log entries might have a timestamp column for when each log entry was written. By using a BRIN index on this column, scanning large parts of the table can be avoided when querying rows by their timestamp value with very little overhead.</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/different-types-index-postgresql/">Different types of Index in PostgreSQL</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/different-types-index-postgresql/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
