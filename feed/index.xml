 <?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Red Panthers</title>
	<atom:link href="/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Experts in Ruby on Rails Development</description>
	<lastBuildDate>Mon, 13 May 2019 23:09:00 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.7</generator>

<image>
	<url>/wp-content/uploads/2017/12/rp-logo.png</url>
	<title>Red Panthers</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</title>
		<link>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/</link>
				<comments>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/#respond</comments>
				<pubDate>Mon, 13 May 2019 23:08:56 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Marketing]]></category>

		<guid isPermaLink="false">/?p=16441</guid>
				<description><![CDATA[<p>Ruby is a programming language with a set of incredibly versatile strengths and applications, with the Ruby on Rails framework helping businesses in countless industries develop powerful and interactive web solutions. While Ruby on Rails provides a world of endless possibilities for quality development, most businesses lack the in house talent to tap into this&#8230;</p>
<p>The post <a rel="nofollow" href="/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/">Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[
<p>
Ruby is a programming language
with a set of incredibly <a href="https://medium.com/kkempin/swot-analysis-of-ruby-on-rails-c421a6c83c09">versatile
strengths and applications</a>,
with the Ruby on Rails framework helping businesses in countless
industries develop powerful and interactive web solutions. While Ruby
on Rails provides a world of endless possibilities for quality
development, most businesses lack the in house talent to tap into
this source of innovation. We proudly fill in the skills-gap for
firms looking to leverage this powerful framework to develop
innovative solutions to a number of challenges.
</p>



<div class="wp-block-image"><figure class="alignright is-resized"><img src="/wp-content/uploads/2019/05/Developers_India_2019-947x1024.png" alt="" class="wp-image-16442" width="341" height="369" srcset="/wp-content/uploads/2019/05/Developers_India_2019-947x1024.png 947w, /wp-content/uploads/2019/05/Developers_India_2019-278x300.png 278w, /wp-content/uploads/2019/05/Developers_India_2019-768x830.png 768w, /wp-content/uploads/2019/05/Developers_India_2019.png 1480w" sizes="(max-width: 341px) 100vw, 341px" /></figure></div>



<p>Through our work developing quality web solutions, we have started to garner some industry recognition. We are excited to share that we have been included on Clutch’s directory of the top <a href="https://clutch.co/in/developers/ruby-rails">Ruby developers</a> in India, thanks to a recent research effort on a wide variety of service industries in India. We outranked more than 100 of our competitors as we started our climb to become a top firm in our field.</p>



<p>The
research effort we were the subject of included factors such as
marketing presence, previous work, and most importantly, client
reviews. We have a rating of 4.8 out of 5 stars thanks to what our
clients have shared with us, mostly reviews like this,</p>



<p>“<em>Red Panthers is a team of highly skilled and passionate engineers who strive to solve problems in eloquent ways. They were eager to learn and train their team on how to improve. They knew how to solve some problems, and when tougher problems arose, we all worked together to find solutions that worked well for everyone</em>.” &#8211; <strong>Founder, Devato Inc</strong> </p>



<p>Reviews
like this help us identify our strengths, weaknesses, and how we are
performing for our clients. We eagerly await whatever else our
clients will share with us.</p>



<p>In
addition to our presence on Clutch, we are included on their
sister-site, The Manifest, as one of the top <a href="https://themanifest.com/in/web-development/companies">web
developers in India</a>.
The Manifest helps firms of all shapes and sizes address a wide array
of industry challenges by providing curated insights and advice. Our
inclusion on their platform as a top firm is due to a number of
factors, namely the quality of our work and our affordability. We are
grateful to be listed as a top development team on two different
industry resources, and we decided to go for a third. We have joined
other expert firms in creating a profile on Visual Objects, a
portfolio sharing platform for <a href="https://visualobjects.com/in/software-development/top-custom-software-developers">developers</a>,
designers, and other innovators alike.</p>



<p>We
are hopeful that our status as a trusted development team will only
grow from here, and we are grateful for all of the recognition we
have received. Thank you to everyone who played a part in our
success, we could not have done this alone, and we cannot wait to see
what new challenges you have for us.</p>
<p>The post <a rel="nofollow" href="/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/">Clawing Our Way to the Top of Clutch’s Directory of Ruby on Rails Developers in India</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/clawing-our-way-to-the-top-of-clutchs-directory-of-ruby-on-rails-developers-in-india/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Upgrading to Rails 5.1x</title>
		<link>/upgrading-to-rails-5-1x/</link>
				<comments>/upgrading-to-rails-5-1x/#respond</comments>
				<pubDate>Wed, 21 Mar 2018 08:14:20 +0000</pubDate>
		<dc:creator><![CDATA[tony]]></dc:creator>
				<category><![CDATA[Rails 5.1]]></category>
		<category><![CDATA[5.1.x]]></category>
		<category><![CDATA[jquery]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[ruby on rails]]></category>
		<category><![CDATA[tony vincent]]></category>
		<category><![CDATA[upgrade]]></category>

		<guid isPermaLink="false">/?p=16171</guid>
				<description><![CDATA[<p>Rails 5.1rolled out with some major changes and features including Yarn and webpack support Dropped JQuery as a default dependency Built-in support for writing system tests using Capybara Encrypted secrets and many more, you can find the detailed release notes here. Recently we upgraded one of our production apps to 5.1x and since we have good test&#8230;</p>
<p>The post <a rel="nofollow" href="/upgrading-to-rails-5-1x/">Upgrading to Rails 5.1x</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Rails 5.1rolled out with some major changes and features including</p>
<ul>
<li>Yarn and webpack support</li>
<li>Dropped JQuery as a default dependency</li>
<li>Built-in support for writing system tests using Capybara</li>
<li>Encrypted secrets</li>
</ul>
<p>and many more, you can find the detailed release notes <a href="http://edgeguides.rubyonrails.org/5_1_release_notes.html">here</a>. Recently we upgraded one of our production apps to 5.1x and since we have good test coverage, upgrading was mostly painless. We still had to make some minor changes down the road</p>
<h3>1. No more <code>before_filter</code></h3>
<p>One of our controllers still had the old-fashioned <code>before_filter</code> and we encountered the following error while booting up</p>
<p class="p1"><code>undefined method 'before_filter' before_filter has been deprecated in Rails 5.0 and removed in 5.1.</code></p>
<p>This is because <code>before_filter</code> and <code>after_filter</code> are <a href="https://github.com/rails/rails/blob/v5.0.0.beta2/actionpack/lib/abstract_controller/callbacks.rb#L190-L193">deprecated</a> from Rails 5.0.0 onwards. As you might have guessed, changing from <code>before_filter</code> to <code>before_action</code> is the solution here.</p>
<p>&nbsp;</p>
<h3>2. <code>halt_callback_chains_on_return_false</code> is deprecated</h3>
<p>We saw the following deprecation warning in our logs after the update</p>
<p class="p1"><code>ActiveSupport.halt_callback_chains_on_return_false= is deprecated and will be removed in Rails 5.2.</code></p>
<p>From Rails 5.0x, the <a href="https://github.com/rails/rails/pull/17227">callback chain is <span class="x x-first x-last">not </span>halted when a before callback returns false</a>. We need to use <code class="highlighter-rouge">throw(:abort)</code> to explicitly halt callbacks</p>
<p>Though we had no return false in our callbacks, we still had to remove the line,</p>
<p><code>ActiveSupport.halt_callback_chains_on_return_false = false</code> from <code>config/initializers/new_framework_defaults.rb</code> to get rid of the warning.</p>
<p>&nbsp;</p>
<h3>3. Passing a class to the <code>class_name</code> is deprecated</h3>
<p>One of the deprecation warnings after the update was,</p><pre class="crayon-plain-tag">Passing a class to the 'class_name' is deprecated and will raise an ArgumentError in Rails 5.2. 
It eagerloads more classes than necessary and potentially creates circular dependencies. Please pass the class name as a string:</pre><p></p>
<p class="p1">This warning message was due to passing a class to <code>class_name</code> option when specifying associations &#8211; this is <a href="https://github.com/rails/rails/commit/8312a0d22212798864f142b5a94805e0baa6c562">no longer recommended</a><span class="hljs-string">&#8216;</span></p>
<p></p><pre class="crayon-plain-tag">- has_one :contact, class_name: UserContact
+ has_one :contact, class_name: 'UserContact</pre><p>passing class name as a string is a standard now</p>
<p>Happy Hacking <img src="https://s.w.org/images/core/emoji/12.0.0-1/72x72/2764.png" alt="❤" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>&nbsp;</p>
<hr />
<p>PS: If you need any help in upgrading your rails version drop an email to us at <strong>info@redpanthers.co </strong>or<strong> upgrade@redpanthers.co. </strong>We will be more than happy to go through your system and give a <strong>free upgrade action plan and estimation </strong>.</p>
<p>The post <a rel="nofollow" href="/upgrading-to-rails-5-1x/">Upgrading to Rails 5.1x</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/upgrading-to-rails-5-1x/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>What&#8217;s new in Ruby 2.5</title>
		<link>/whats-new-ruby-2-5/</link>
				<comments>/whats-new-ruby-2-5/#respond</comments>
				<pubDate>Mon, 25 Dec 2017 08:08:56 +0000</pubDate>
		<dc:creator><![CDATA[nimmy]]></dc:creator>
				<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby 2.5]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=4219</guid>
				<description><![CDATA[<p>The Ruby language has increasingly stabilized over the years. The upcoming release of Ruby 2.5 is not going to let us down too. It introduces lots of new features and improvements over the previous version. The first preview was released on 10th October 2017 and the final build will be released on this 25th. This&#8230;</p>
<p>The post <a rel="nofollow" href="/whats-new-ruby-2-5/">What&#8217;s new in Ruby 2.5</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>The Ruby language has increasingly stabilized over the years. The upcoming release of Ruby 2.5 is not going to let us down too. It introduces lots of new features and improvements over the previous version. The first preview was released on 10th October 2017 and the final build will be released on this 25th. This blog dissects into this latest and exciting release and goes through some of the most important changes, we will be writing another article on performance improvement once the 2.5 if officially released.</p>
<ul>
<li>
<h2>Added <code>Hash#transform_keys</code> method</h2>
</li>
</ul>
<p>Ruby 2.4 added the <code>transform_values</code> method, 2.5 completes it by adding <code>transform_keys</code> thus make it a perfect pair.</p>
<p>Hash#transform_keys can change keys according to the return value of a block:</p><pre class="crayon-plain-tag">hash = { a: 1, b: 2 }
=&gt; {:a=&gt;1, :b=&gt;2}
hash.transform_keys { |k| k.to_s }
=&gt; {"a"=&gt;1, "b"=&gt;2}
hash
=&gt; {:a=&gt;1, :b=&gt;2}</pre><p><code>transform_keys!</code> is a destructive version:</p><pre class="crayon-plain-tag">hash = { a: 1, b: 2 }
=&gt; {:a=&gt;1, :b=&gt;2}
hash.transform_keys! { |k| k.to_s } 
=&gt; {"a"=&gt;1, "b"=&gt;2}
hash
=&gt; {"a"=&gt;1, "b"=&gt;2}</pre><p>We know how many times we had to manipulate the keys of a hash. <code>transform_keys</code> is gonna be a game changer and going to be very compelling to be used in your legacy app. The destructive version is a just silver lining to this.</p>
<ul>
<li>
<h2>Array#prepend and Array#append</h2>
</li>
</ul>
<p>Ruby 2.5 brings home two new aliases which are so much better than the two of the most used operations in the language. <code>Array#prepend</code> and <code>Array#append</code> are more programmer friendly than the conventional <code>Array#unshift</code> and <code>Array#push</code>. Ruby IS THE language which focuses on the programmers&#8217; happiness primarily after all.</p><pre class="crayon-plain-tag">&gt;&gt; a = ["hello"]
=&gt; ["hello"]
&gt;&gt; a.append "world"
=&gt; ["hello", "world"]
&gt;&gt; a.prepend "Hi"
=&gt; ["Hi", "hello", "world"]</pre><p></p>
<ul>
<li>
<h2>Added yield_self method</h2>
</li>
</ul>
<p>This method yields the receiver to the given block and returns the output of the last statement in the block which is somewhat similar to the tap method.The only difference is the value that is returned.<code class="highlighter-rouge">yield_self</code> method returns the output of the block but <code class="highlighter-rouge">tap</code> method returns the receiver itself.</p><pre class="crayon-plain-tag">"Hello".yield_self { |obj| obj + " World"}
=&gt; "Hello World"

"Hello".tap { |obj| obj + " World" }
 =&gt; "Hello"</pre><p></p>
<ul>
<li>
<h2>rescue/else/ensure are allowed inside do/end blocks without begin/end</h2>
</li>
</ul>
<p>We could omit the begin/end and not need the extra wrapper for rescue/else/ensure clauses in Ruby 2.5</p><pre class="crayon-plain-tag">[1].each do |n|
  n / 0
rescue
  # rescue
else
  # else
ensure
  # ensure
end</pre><p></p>
<ul>
<li>
<h2>String#delete_prefix/delete_suffix</h2>
</li>
</ul>
<p>In Ruby 2.4 we used chomp method to remove the suffix &#8216;world&#8217; from &#8216;HelloWorld&#8217; and to remove prefix there is no corresponding method for chomp. The solution was to resort to a <a href="https://ruby-doc.org/core-2.4.2/String.html#sub-method">sub</a> which is using the regular expression for such a simple task.</p>
<p>Ruby 2.5 added new methods to take care of such tasks. Now in order to delete prefix, we can use delete_prefix and to delete suffix we could use chomp. But the method names don&#8217;t seem good. So for symmetry delete_suffix was added.</p><pre class="crayon-plain-tag">'HelloWorld'.delete_prefix('Hello')
=&gt; "World" 
'HelloWorld'.delete_suffix('World')
=&gt; "Hello"</pre><p></p>
<ul>
<li>
<h2>Ruby 2.5 has removed top-level constant lookup</h2>
</li>
</ul>
<p>Consider the following code in Ruby 2.4.</p><pre class="crayon-plain-tag">class Book;
end
class Seller;
end
 
Book::Seller</pre><p>This code works with a warning. The top-level constants are defined under Object class, and Ruby tries to look up the superclass of Book class, and eventually finds Seller under the Object class which is a superclass of Book class.</p>
<p>But in Ruby 2.5, Ruby won’t look up superclass. So the previous code fails with an error.</p><pre class="crayon-plain-tag">Book::Seller
#=&gt; NameError: uninitialized constant Book::Seller
#   Did you mean?  Seller</pre><p>Ruby 2.5 throws an error if it is unable to find constant in the specified scope.</p>
<ul>
<li>
<h2>New method to ERB to allow assigning the local variables from a hash</h2>
</li>
</ul>
<p>In Ruby 2.4, we had to do hacks like following to assign local variables to ERB template.</p><pre class="crayon-plain-tag">require 'erb'
require 'ostruct'
 
namespace = OpenStruct.new(a: 10, b: 3)
template = 'Result: &lt;%= a * b %&gt;'
ERB.new(template).result(namespace.instance_eval { binding })
#=&gt; "Result: 30"</pre><p>ERB could allow a hash instead of a binding for processing the template in Ruby 2.5 such that we could avoid hacks as above.</p>
<p>To allow assigning the local variables from a hash we can use <code>result_with_hash</code> method.</p><pre class="crayon-plain-tag">require 'erb'

result = 'Result: &lt;%= a * b %&gt;'
ERB.new(result).result_with_hash(a: 10, b: 3)
#=&gt; "Result: 30"</pre><p></p>
<ul>
<li>
<h2>Dir.children and Dir.each_child</h2>
</li>
</ul>
<p>ls -a command will list all files including hidden files (files with names beginning with a dot). Dir.entries  method present in Ruby 2.4 returns this output in an array.</p><pre class="crayon-plain-tag">Dir.entries("/home")
=&gt; ["..", "user", "."]</pre><p>Another method Dir.foreach  iterates and yields each value from the output of ls -a command to the block.</p><pre class="crayon-plain-tag">Dir.foreach("/home") { |child| puts child }
..
user
.</pre><p>The output includes the directives for the current directory and parent directory which are &#8220;.&#8221; and &#8220;..&#8221;.</p>
<p>When we want to have access only to the children files and directories, we do not need the [&#8220;.&#8221;, &#8220;..&#8221;] subarray. To overcome such issues, Ruby 2.5 introduced Dir.children. It returns the output of ls -a command without the directives for current and parent directories.</p><pre class="crayon-plain-tag">Dir.children("/home")
=&gt; ["user"]</pre><p>We can use Dir.each_child method to avoid yielding current and parent directory directives while iterating.</p><pre class="crayon-plain-tag">Dir.each_child("/home") { |child| puts child }
user</pre><p></p>
<ul>
<li>
<h2>Imported features from ActiveSupport library</h2>
</li>
</ul>
<p>Over the past few years, Ruby has been merging the best features from the ActiveSupport library, into the core language. In Ruby 2.5 version, <code>Hash#slice</code>, <code>Hash#slice!</code>, <code>Hash#except</code>, <code>Hash#except!</code> are such methods continuing the trend, imported from ActiveSupport.</p>
<p>The ActiveSupport library comes bundled with the popular Ruby on Rails framework, but can also be used in isolation. It provides many extensions to Ruby&#8217;s core classes.</p><pre class="crayon-plain-tag">{a: 1, b: 2, c: 3}.slice(:a, :b)
#=&gt; {:a=&gt;1, :b=&gt;2}</pre><p>&nbsp;</p>
<p>One of the notable feature in 2.5 release was bundler packed with ruby core, but it is posponed due to some issues, See the <a href="https://github.com/ruby/ruby/commit/7825e8363d4b2ccad8e2d3f5eeba9e26f6656911">commit</a></p>
<h2>Further changes</h2>
<p><a href="https://github.com/ruby/ruby/blob/v2_5_0/NEWS">NEWS for Ruby 2.5.0 </a> news page can be referred to find other news and changes on Ruby 2.5</p>
<h2></h2>
<h2>References</h2>
<ul>
<li><a href="https://github.com/ruby/ruby/blob/v2_5_0/NEWS">https://github.com/ruby/ruby/blob/v2_5_0/NEWS</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/">https://www.ruby-lang.org/en/news/2017/12/25/ruby-2-5-0-released/</a></li>
</ul>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/whats-new-ruby-2-5/">What&#8217;s new in Ruby 2.5</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/whats-new-ruby-2-5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Crystal tuples: the immutable data structure of crystal</title>
		<link>/tuples-immutable-data-crystal/</link>
				<comments>/tuples-immutable-data-crystal/#comments</comments>
				<pubDate>Wed, 06 Dec 2017 13:47:11 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[crystal]]></category>
		<category><![CDATA[basics]]></category>
		<category><![CDATA[crystal 101]]></category>
		<category><![CDATA[fp]]></category>
		<category><![CDATA[functional programming]]></category>
		<category><![CDATA[immutable datastructure]]></category>
		<category><![CDATA[newbie]]></category>
		<category><![CDATA[tuple]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3985</guid>
				<description><![CDATA[<p>Tuple is a data structure which has immutable elements and is of a fixed size. Its similar to an array, but unlike arrays in crystal and ruby which allows adding more values over time a tuple is of fixed and cannot change. (Disclaimer: This article is meant for Ruby developer and explaining what a tuple&#8230;</p>
<p>The post <a rel="nofollow" href="/tuples-immutable-data-crystal/">Crystal tuples: the immutable data structure of crystal</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><strong>Tuple</strong> is a data structure which has immutable elements and is of a fixed size. Its similar to an array, but unlike arrays in crystal and ruby which allows adding more values over time a tuple is of fixed and cannot change. (Disclaimer: This article is meant for Ruby developer and explaining what a tuple is to a ruby developer).</p>
<p>In crystal we have two types of tuple</p>
<p>1) Tuple <code>{1, "hello", :world}</code><br />
2) NamedTuple <code>{x: 1, y:2, z: 5}</code></p>
<p>They are immutable, which means if you try changing the value of an element in a tuple you will get an exception. Since crystal programs are compiled before execution you will get to see these errors while you compile the program itself.</p>
<p>example:</p><pre class="crayon-plain-tag">x = {1, 2, 3}

# to get the value use
x[0]</pre><p>If you try assigning a value to it, like so</p><pre class="crayon-plain-tag">x[0] = 10</pre><p>You will get an exception like bellow.</p><pre class="crayon-plain-tag">undefined method '[]=' for Tuple(Int32, Int32)</pre><p>In crsytal, tuples are the preferred way to return a multiple results from a method.</p>
<p><strong>For example</strong> inside the crystal core we have a method to get the minimum and maximum of an array.</p><pre class="crayon-plain-tag">(1..100).minmax</pre><p>the result would be <strong>{1, 100}</strong></p>
<blockquote><p>Note: Since we just mentioned <strong>minmax</strong>, have a look at <strong>minmax_by</strong> method as well.<b> </b>It would let you apply a block of code over your range and then return the minimum and maximum based on the returned collection.</p><pre class="crayon-plain-tag">["1234", "12", "123"].minmax_by { |i| i.size }
# =&gt; {"12", "1234"}</pre><p>
</p></blockquote>
<p>Advantage of using tuple to return results instead of something like hash, is that we can be sure that our result cannot be altered accidentally. (since the data structure is immutable) ?</p>
<p><strong>You can build a tuple from an array by using the <code>.from</code> method</strong></p><pre class="crayon-plain-tag">Tuple(Int32, Int32).from([1, 2])</pre><p>As a developer, the place where we use tuple the most in crystal are with splats(symbol: *). Passing arguments to method using splat and double splat operator is something we use widely in ruby keep our code small and readable. So if you wish to do the same in crystal you need to make a tuple not a hash or array.</p>
<p>If you use splat on an array directly like <code>test(*[1,2])</code> it would return an error</p><pre class="crayon-plain-tag">argument to splat must be a tuple, not Array(Int32)</pre><p>So to achieve the same effect as a splat with array in crystal we would need to do <code>test(*{1,2})</code></p>
<h2>Named Tuple</h2>
<p>Named Tuple are everything as above, but with a name for each element. Named Tuple looks like <code>{x: 1, y:2}</code> it gives more meaning to our tuple. Like the above you can access the values but not change them.</p><pre class="crayon-plain-tag">data = {x: 1, y: 2}

# to get the value
data[:x]

# raises errors when we try to change it
data[:x] = 1</pre><p>Double splats are meant for Named Tuple where in we can pass in the values for a particular argument using named tuple and double splat.</p><pre class="crayon-plain-tag">def print_date(year = nil, month = nil, day = nil)
  puts "#{year}/#{month}/#{day}"
end

birth_day = { year: 1990, month: 4, day: 3}

print_date(**birth_day)

card_expiry = { year: 2020, month: 1}

print_date(**card_expiry)</pre><p>You can build a NamedTuple from a hash.</p><pre class="crayon-plain-tag">NamedTuple(name: String, val: String).from({"name" =&gt; "number", "val" =&gt; "Harisankar P S"}</pre><p><strong>Note:</strong> Crystal has a nifty feature called Union types (a variable can store data of multiple data types), so if it happen to pass such a variable to a named tuple/tuple, it will still check for the exact type that we want if the data is not in that variable then an exception would be raised</p>
<p>Example</p><pre class="crayon-plain-tag">k = 42.as(Int32 | String)
NamedTuple(name: String, val: String).from({"name" =&gt; "number", "val" =&gt; K}</pre><p>Exception:</p><pre class="crayon-plain-tag">cast from Int32 to String failed, at /usr/local/Cellar/crystal-lang/0.23.1_1/src/class.cr:41:5:41 (TypeCastError)
0x10e8f1085: *CallStack::unwind:Array(Pointer(Void)) at ??
0x10e8f1021: *CallStack#initialize:Array(Pointer(Void)) at ??
0x10e8f0ff8: *CallStack::new:CallStack at ??
0x10e8ec295: *raise&lt;TypeCastError&gt;:NoReturn at ??
0x10e90feb8: *String@Object::cast&lt;(Int32 | String)&gt;:String at ??
0x10e95faa3: *NamedTuple(name: String:Class, val: String:Class)@NamedTuple(T)#from&lt;Hash(String, Int32 | String)&gt;:NamedTuple(name: String, val: String) at ??
0x10e95f787: *NamedTuple(name: String, val: String)@NamedTuple(T)::from&lt;Hash(String, Int32 | String)&gt;:NamedTuple(name: String, val: String) at ??
0x10e8ef8a6: *__icr_exec__:NamedTuple(name: String, val: String) at ??
0x10e8db130: __crystal_main at ??
0x10e8ee578: main at ??</pre><p></p>
<h2><strong>Extra Note:</strong></h2>
<p><span style="font-size: 16px;">If you put a splat before method argument and pass in arguments, they will be converted to a tuple</span></p><pre class="crayon-plain-tag">def a_method(*data)
  puts data
end

a_method(1,2,3)
#=&gt; {1,2,3}</pre><p>If you put a double splat before method argument and pass in data as keyword argument it gets converted to a NamedTuple</p><pre class="crayon-plain-tag">def a_method(**data)
  puts data
end

a_method(x: 1, y: 10)
#=&gt; {x: 1, y: 10}</pre><p>&nbsp;</p>
<h3>To summarize:</h3>
<ul>
<li>Tuples are immutable data structure</li>
<li>Regular tuple is like a frozen array</li>
<li>You can use splat only with a tuple</li>
<li>NamedTuple is like a frozen hash</li>
<li>Double splat can only be used with NamedTuple</li>
</ul>
<p>The post <a rel="nofollow" href="/tuples-immutable-data-crystal/">Crystal tuples: the immutable data structure of crystal</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/tuples-immutable-data-crystal/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Getting started with Faraday gem</title>
		<link>/getting-started-faraday-gem/</link>
				<comments>/getting-started-faraday-gem/#respond</comments>
				<pubDate>Thu, 16 Nov 2017 17:54:51 +0000</pubDate>
		<dc:creator><![CDATA[nimmy]]></dc:creator>
				<category><![CDATA[Rails]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=4033</guid>
				<description><![CDATA[<p>&#160; Client libraries help in reducing the amount of code for the application developer who is using the API, whether a REST API or any other. By adding a set of code to the application, it provides the basic things an application needs to do in order to interact with the API. This is what a&#8230;</p>
<p>The post <a rel="nofollow" href="/getting-started-faraday-gem/">Getting started with Faraday gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>&nbsp;</p>
<p>Client libraries help in reducing the amount of code for the application developer who is using the API, whether a REST API or any other. By adding a set of code to the application, it provides the basic things an application needs to do in order to interact with the API. This is what a client library does. Also, it may handle user authentication and authorization.</p>
<p>Client libraries are developed by API developer or the community.</p>
<p>There are several HTTP client libraries in Ruby such as:</p>
<ul>
<li>
<h4><a href="https://github.com/jnunemaker/httparty">HTTParty</a></h4>
</li>
<li>
<h4><a href="https://github.com/lostisland/faraday">Faraday</a></h4>
</li>
<li>
<h4>Built-in <a href="http://ruby-doc.org/stdlib-2.2.3/libdoc/net/http/rdoc/Net/HTTP.html">Net::HTTP</a></h4>
</li>
<li>
<h4><a href="https://github.com/rest-client/rest-client">Rest-Client</a></h4>
</li>
<li>
<h4><a href="https://github.com/nahi/httpclient">HTTPClient</a></h4>
</li>
</ul>
<p>Among them, the favorite of mine is Faraday gem. Faraday has adapters for popular libraries like Net::HTTP. It is simple, flexible and supports multiple backends and embraces the concept of Rack middleware when processing the request/response cycle. Also, it&#8217;s possible to customize its behavior with middleware.</p>
<p>We will use a connection object to start with Faraday as it&#8217;s more flexible way than a simple <code>get</code>request.</p><pre class="crayon-plain-tag">conn = Faraday.new
response = conn.get 'http://localhost:3000/tasks'</pre><p>Using this connection object, we make HTTP requests.</p><pre class="crayon-plain-tag">params = {:title =&gt; 'Faraday gem', :created_by =&gt; 'blog'}
conn.post('http://localhost:3000/tasks',params)</pre><p>This will POST  title = &#8216;Faraday gem&#8217;  and created by = &#8216;blog&#8217; to http://localhost:3000/tasks.</p>
<p>All HTTP verb methods can take an optional block that will yield a<code>Faraday::Request</code> object.</p><pre class="crayon-plain-tag"> conn.post do |req|
   req.url '/tasks'
   req.headers['Content-Type'] = 'application/json'
   req.body = '{"some": "content"}'
 end</pre><p></p>
<h2>Authentication</h2>
<p>Basic and Token authentication are handled by <code>Faraday::Request::BasicAuthentication</code> and <code>Faraday::Request::TokenAuthentication</code> respectively. These can be added as middleware manually or through the helper methods.</p><pre class="crayon-plain-tag">conn.basic_auth('username', 'password')
conn.token_auth('token')</pre><p></p>
<h2>Proxies</h2>
<p>To specify an HTTP proxy:</p><pre class="crayon-plain-tag">Faraday.new(:proxy =&gt; 'http://proxy.example.com:80/')</pre><p></p>
<h2>Using a different HTTP Adapter</h2>
<p>Faraday provides an interface between our code and adapter. Sometimes we may want to use features that are not covered in Faraday&#8217;s interface. In such cases, we can have access to features specific to any of the adapters supported by Faraday, by passing a block when specifying the adapter to customize it.</p>
<p>For example, you can switch to the HTTPClient adapter as below</p><pre class="crayon-plain-tag"> conn = Faraday.new do |builder|
   builder.adapter :httpclient do |client| # yields HTTPClient
     client.keep_alive_timeout = 20
   end
 end</pre><p>Like this, we can switch to any of the supported adapters.</p>
<p>The block parameters will change based on the adapters we are using.</p>
<h2><code>Faraday::Connection</code> object middlewares</h2>
<p>A <code>Faraday::Connection</code> object has a list of middlewares, just like a Rack app. Faraday middlewares are passed as an <code>env</code> hash. It has request and response information.</p><pre class="crayon-plain-tag">conn = Faraday.new
conn.builder
=&gt; #&lt;Faraday::RackBuilder:0x0000000155d1f0 @handlers=[Faraday::Request::UrlEncoded,
   #Faraday::Adapter::NetHttp]&gt;</pre><p><code>Faraday::Builder</code> is similar to <code>Rack::Builder</code>.</p>
<p>A new <code>Faraday::Connection</code>object is initialized. It has middlewares <code> Faraday::Request::UrlEncoded</code> in front of an adapter <code>Faraday::Adapter::NetHttp</code>.  Like a Rack application, the adapter at the end of the builder chain is what actually executes the request.</p>
<p>Middlewares are grouped into request middlewares, response middlewares, and adapters.</p><pre class="crayon-plain-tag">Faraday.new do |builder|

  builder.request :retry

  builder.request :basic_authentication, 'login', 'pass'

  builder.response :logger

  builder.adapter :net_http

end</pre><p></p>
<h2>Advanced Middleware Usage</h2>
<p>The order in which middleware is stacked in Faraday is like in Rack. The first middleware on the list wraps all others, while the last middleware is the innermost one, so that’s usually the adapter.</p><pre class="crayon-plain-tag">conn = Faraday.new(:url =&gt; '/') do |builder|

  # POST/PUT params encoders:

  builder.request :multipart

  builder.request :url_encoded

  builder.adapter :net_http

end</pre><p>Middlewares stack is manipulated by the <code>Faraday::Builder</code> instance. Each <code>Faraday::Connection</code> instance has a <code>Faraday::Builder</code> instance.</p><pre class="crayon-plain-tag">conn = Faraday.new

conn.builder.swap(1, Faraday::Adapter::HTTPClient)

# replace adapter

conn.builder.insert(0, MyCustomMiddleware)

# add middleware to beginning

conn.builder.delete(MyCustomMiddleware)</pre><p></p>
<h2>Writing middleware</h2>
<p>Middlewares are classes that respond to call. When middleware is executing, it&#8217;s passed as an env hash that has request and response information. Middleware wrap the request/response cycle.</p>
<p>The general interface for a middleware is:</p><pre class="crayon-plain-tag">class CustomizedMiddleware

  def call(env)

    # do something with the request

    @app.call(env).on_complete do |env|

    # do something with the response

    end
  end
end</pre><p>All processing of the response should be done in the on-complete block. This enables middleware to work in parallel mode when many requests are occurring at the same time. After the on_complete block, env[:response] is filled in. Faraday::Response instance will be available <span class="hljs-keyword">only</span> <span class="hljs-keyword">after</span> <code><span class="hljs-string">on_complete</code>.</span></p>
<p><a href="https://github.com/lostisland/faraday_middleware">faraday-middleware</a>  is a collection of various Faraday middlewares for Faraday-based API wrappers.</p>
<p>For testing middleware, Faraday::Adapter::Test is an HTTP adapter middleware that lets you to fake responses.</p>
<p>&nbsp;</p>
<h2>References</h2>
<ul>
<li><a href="https://github.com/lostisland/faraday">https://github.com/lostisland/faraday</a></li>
</ul>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/getting-started-faraday-gem/">Getting started with Faraday gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/getting-started-faraday-gem/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Getting start with React Native</title>
		<link>/getting-start-with-react-native/</link>
				<comments>/getting-start-with-react-native/#respond</comments>
				<pubDate>Mon, 23 Oct 2017 04:33:07 +0000</pubDate>
		<dc:creator><![CDATA[vishnu]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[ReactJS]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3660</guid>
				<description><![CDATA[<p>React Native lets you build mobile apps using only JavaScript. A React Native app is a real mobile app. It uses the same design as React, letting you compose a rich mobile UI from declarative components. Installation Using Create React Native App we can start building a new React Native application easily. It allows you to start a project without installing or&#8230;</p>
<p>The post <a rel="nofollow" href="/getting-start-with-react-native/">Getting start with React Native</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><strong>React Native</strong> lets you build mobile apps using only JavaScript. A React Native app is a real mobile app. It uses the same design as React, letting you compose a rich mobile UI from declarative components.</p>
<h2>Installation</h2>
<p>Using <a href="https://github.com/react-community/create-react-native-app" rel="noopener">Create React Native App</a> we can start building a new React Native application easily. It allows you to start a project without installing or configuring any tools to build native code &#8211; no Xcode or Android Studio installation required.</p>
<p>Assuming that you have <a href="https://nodejs.org/en/download/" rel="noopener">Node</a> installed, you can use npm to install the <code>create-react-native-app</code> command-line utility:</p><pre class="crayon-plain-tag">$ npm install -g create-react-native-app</pre><p>Try creating a new project:-</p><pre class="crayon-plain-tag">$ npm i -g create-react-native-app
$ create-react-native-app my-project
$ cd my-project
$ npm start</pre><p>This will start a development server for you, and print a QR code in your terminal.</p>
<p>To run your app,</p>
<p>Install the <a href="https://expo.io/" rel="noopener">Expo</a> client app on your iOS or Android phone and connect to the same wireless network as your computer. Using the Expo app, scan the QR code from your terminal to open your project.</p>
<h2>Basic App</h2>
<p>In the App.js file you can see:-</p><pre class="crayon-plain-tag">import React, { Component } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default class App extends Component {
  render() {
    return (
      &lt;Text&gt;Hello world!&lt;/Text&gt;
    );
  }
}</pre><p><code>import</code>, <code>from</code>, <code>class</code>, <code>extends</code>, and the <code>() =&gt;</code> syntax in the example above are all ES2015 (also known as ES6)  features. The unusual thing in this code example is.<code>&lt;Text&gt;Hello world!&lt;/Text&gt;</code> This is JSX &#8211; a syntax for embedding XML within JavaScript. <code>&lt;Text&gt;</code> is a built-in component that just displays some text. This code is defining, <code>App</code> a new <code>Component</code> . Anything you see on the screen is some sort of component. A component can be pretty simple &#8211; the only thing that&#8217;s required is a <code>render</code> function which returns some JSX to render.</p>
<p>You can also write style in App.js file.</p><pre class="crayon-plain-tag">const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#4286f4',
    alignItems: 'center',
    justifyContent: 'center',
  },
});</pre><p>To modify your app, you can edit App.js file. The application should reload automatically once you save your changes.</p>
<h2>Create React Native App</h2>
<p>Create React Native App makes it really easy to run your React Native app on a physical device without setting up a development environment. If you want to run your app on the iOS Simulator or an Android Virtual Device, please refer to the instructions for building projects with native code to learn how to install Xcode and set up your Android development environment.</p>
<p>Once you&#8217;ve set these up, you can launch your app on an Android Virtual Device by running, npm run android or on the iOS Simulator by running npm run ios (macOS only).</p>
<h3>Pros</h3>
<ul>
<li>JavaScript − You can use the existing JavaScript knowledge to build native mobile apps.</li>
<li>Community − The community around React and React Native is large, and you will be able to find any answer you need.</li>
<li>Code sharing − You can share most of your code on different platforms.</li>
</ul>
<h3>Cons</h3>
<ul>
<li>Native Components − If you want to create a native functionality which is not created yet, you will need to write some platform specific code.</li>
</ul>
<p>React Native is focused solely on building a mobile UI. Compared with JavaScript frameworks like AngularJS or MeteorJS, React Native is UI-focused, making it more like a JavaScript library than a framework. The resulting UI is highly responsive and feels fluid thanks to asynchronou<span style="color: #000000;">s JavaScript interactions</span> with the native environment. This means the app will have quicker load times than a typical hybrid app, and a smoother feel.</p>
<h2>Reference</h2>
<p><a href="https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html">https://facebook.github.io/react-native/blog/2017/03/13/introducing-create-react-native-app.html</a></p>
<p><a href="https://facebook.github.io/react-native/docs/tutorial.html#content">https://facebook.github.io/react-native/docs/tutorial.html#content</a></p>
<p>The post <a rel="nofollow" href="/getting-start-with-react-native/">Getting start with React Native</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/getting-start-with-react-native/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Observer Design Pattern in Ruby</title>
		<link>/observer-design-pattern-ruby/</link>
				<comments>/observer-design-pattern-ruby/#comments</comments>
				<pubDate>Mon, 16 Oct 2017 10:24:44 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1264</guid>
				<description><![CDATA[<p>Observer design pattern (also known as Publish/Subscribe) is a software design pattern, used when we are building a system where the state of one object affects the state of other objects. It is a key part of model-view-controller architectural pattern. In a traditional MVC ( Model-View-Controller ) architecture, a model is a subject and a view is an observer.&#8230;</p>
<p>The post <a rel="nofollow" href="/observer-design-pattern-ruby/">Observer Design Pattern in Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Observer design pattern (also known as Publish/Subscribe) is a software design pattern, used when we are building a system where the state of one object affects the state of other objects. It is a key part of <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">model-view-controller</a> architectural pattern.</p>
<p>In a traditional MVC ( Model-View-Controller ) architecture, a model is a <em class="markup--em markup--p-em">subject</em> and a view is an <em class="markup--em markup--p-em">observer</em>. A view is notified when a model changes and responds accordingly. When the subject sends observers detailed information about what has changed, indiscriminately, this is known as the <em class="markup--em markup--p-em">push model </em>of the <strong class="markup--strong markup--p-strong">Observer </strong>pattern. When a subject sends only minimal information to its observers must ask for details explicitly, this is known as the <em class="markup--em markup--p-em">pull model</em> of the <strong class="markup--strong markup--p-strong">Observer</strong> pattern.</p>
<p><a href="http://blog.redpanthers.co/wp-content/uploads/2017/01/observer-1.png"><img class="wp-image-1459 size-full aligncenter" src="http://blog.redpanthers.co/wp-content/uploads/2017/01/observer-1.png" alt="Observer Design Pattern" width="444" height="227" /></a></p>
<p>Ruby provides a simple mechanism to implement this design pattern using the <code>Observable</code> module. In this mechanism, the Notifier class uses the <code>Observable</code> module, which provides the methods for managing the associated observer objects.</p>
<p>The observable object must:</p>
<ul>
<li>assert that it has <code>#changed</code></li>
<li>call <code>#notify_observers</code></li>
</ul>
<p>An observer subscribes to updates using <a href="https://ruby-doc.org/stdlib-2.3.2/libdoc/observer/rdoc/Observable.html#method-i-add_observer">#add_observer</a>, which also specifies the method called via <a href="https://ruby-doc.org/stdlib-2.3.2/libdoc/observer/rdoc/Observable.html#method-i-notify_observers">notify observers</a>. The default method for <a href="https://ruby-doc.org/stdlib-2.3.2/libdoc/observer/rdoc/Observable.html#method-i-notify_observers">notify observers</a> is update.</p>
<h2 class="section-header">Public Instance Methods</h2>
<p>Instance methods are methods that are called on an instance of a class. We can use the below methods while using Observer instances.</p>
<ul>
<li class="method-heading"><span class="method-name">add_observer</span><span class="method-args">(observer, func=:update)</span></li>
</ul>
<div>
<p style="padding-left: 60px;">Adds <code>observer</code> as an observer on this object, so that it will receive notifications.</p>
<ul>
<li class="method-heading"><span class="method-name">changed</span><span class="method-args">(state=true)</span></li>
</ul>
<div>
<p style="padding-left: 60px;">Set the changed state of this object. Notifications will be sent only if the changed <code>state</code> is <code>true</code>.</p>
<ul>
<li class="method-heading"><span class="method-name">changed?</span><span class="method-args">()</span></li>
</ul>
<div>
<p style="padding-left: 60px;">Returns true if this object’s state has been changed since the last notify_observers call.</p>
<ul>
<li class="method-heading"><span class="method-name">count_observers</span><span class="method-args">()</span></li>
</ul>
<p style="padding-left: 60px;">Return the number of observers associated with this object.</p>
<ul>
<li class="method-heading"><span class="method-name">delete_observer</span><span class="method-args">(observer)</span></li>
</ul>
<p style="padding-left: 60px;">Remove <code>observer</code> as an observer on this object so that it will no longer receive notifications.</p>
<ul>
<li class="method-heading"><span class="method-args"><span class="method-name">delete_observers</span>()</span></li>
</ul>
<p style="padding-left: 60px;">Remove all observers associated with this object.</p>
<ul>
<li>notify_observers(*arg)</li>
</ul>
<div style="padding-left: 60px;">Notify observers of a change in state <strong>if</strong> this object’s changed state is <code>true.</code></div>
</div>
</div>
</div>
<h2>How it works</h2>
<p>First, we have to create a basic structure of the Notifier class which will act as an Observer. The <em>update()</em> method is the callback that the <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/observer/rdoc/Observable.html">Observable</a> module will use when notifying changes to the observer, and the method name needs to be <em>update()</em>.</p>
<p>Let’s take an example of an application which keeps track of the bike mileage and reminds us of when we need to take the vehicle in for a scheduled bike service.</p><pre class="crayon-plain-tag">require 'observer'

class Bike
  include Observable

  attr_reader :mileage,:service

  def initialize(mileage =0, service = 3000)
    @mileage,@service = mileage, service
    add_observer(Notifier.new)
  end

  def log(miles)
    @mileage += miles
    notify_observers(self, miles)
  end
end</pre><p>Next, write the update method in Notifier class</p><pre class="crayon-plain-tag">class Notifier
  def update(bike, miles)
    puts "The bike has logged #{miles} miles, totaling #{bike.mileage} miles traveled."
    puts "The bike needs to be taken in for a service!" if bike.service &lt;= bike.mileage
  end
end</pre><p></p>
<p class=" language-ruby">By running the code we can see</p>
<p></p><pre class="crayon-plain-tag">bike = Bike.new(2300, 3000)
bike.log(100)
=&gt; "The bike has logged 100 miles, totaling 2400 miles traveled."
bike.log(600)
=&gt; "The bike has logged 300 miles, totaling 3000 miles traveled."
=&gt; "The bike needs to be taken in for service!"</pre><p></p>
<p class=" language-ruby">First, we create an instance of the <i>Bike</i> class with 2300 miles, and we set that it needs to be taken for service when it reaches 3000 miles.</p>
<p class=" language-ruby">I hope this example helps you understand ruby observer design pattern better.</p>
<p>Let me know in comments if you have any doubts or any implementation issues you have been facing recently. Thanks for reading!</p>
<h2 class=" language-ruby">References</h2>
<ul>
<li><a href="https://ruby-doc.org/stdlib-2.3.2/libdoc/observer/rdoc/Observable.html#module-Observable-label-Mechanism">https://ruby-doc.org/stdlib-2.3.2/libdoc/observer/rdoc/Observable.html#module-Observable-label-Mechanism</a></li>
<li><a href="https://cbabhusal.wordpress.com/2015/10/03/gang-of-four-observer-design-pattern-in-ruby/">https://cbabhusal.wordpress.com/2015/10/03/gang-of-four-observer-design-pattern-in-ruby/</a></li>
</ul>
<p>The post <a rel="nofollow" href="/observer-design-pattern-ruby/">Observer Design Pattern in Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/observer-design-pattern-ruby/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Gulp</title>
		<link>/gulp/</link>
				<comments>/gulp/#respond</comments>
				<pubDate>Fri, 29 Sep 2017 09:36:51 +0000</pubDate>
		<dc:creator><![CDATA[reshma]]></dc:creator>
				<category><![CDATA[Javascript]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3697</guid>
				<description><![CDATA[<p>Gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something. You can compile sass files, uglify and compress js files and much more. Installation Make sure that you&#8217;ve installed Node and npm before attempting to install gulp. Install the gulp command [crayon-5f53e8e5e08fc418923999/] Make sure that&#8230;</p>
<p>The post <a rel="nofollow" href="/gulp/">Gulp</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something. You can compile sass files, uglify and compress js files and much more.</p>
<h2>Installation</h2>
<p>Make sure that you&#8217;ve installed Node and npm before attempting to install gulp.</p>
<p>Install the gulp command</p><pre class="crayon-plain-tag">npm install --global gulp-cli</pre><p>Make sure that you have your <code>package.json</code> created by manually creating it or typing <code>npm init</code>.</p>
<p>Run this command in your project directory:</p><pre class="crayon-plain-tag">npm install --save-dev gulp</pre><p></p>
<h4>Create a gulpfile</h4>
<p>In your project directory, create a file named <code>gulpfile.js</code> in your project root with these contents:</p><pre class="crayon-plain-tag">var gulp = require('gulp');

gulp.task('task-name', function() {
  // place code for your default task here
});</pre><p>The first step to using Gulp is to <code>require</code> it in the gulpfile. Then you can begin to write a gulp task with this <code>gulp</code> variable. <code>task-name</code> refers to the name of the task, which would be used whenever you want to run a task in Gulp. You can also run the same task in the command line by writing <code>gulp task-name</code>.</p>
<p>Run the gulp command in your project directory:</p><pre class="crayon-plain-tag">gulp</pre><p>To run multiple tasks, you can use <code>gulp &lt;task&gt; &lt;othertask&gt;</code></p>
<p>Gulp tasks are usually a bit more complex than this. It usually contains two additional Gulp methods, plus a variety of Gulp plugins.</p><pre class="crayon-plain-tag">gulp.task('task-name', function () {
  return gulp.src('source-files') // Get source files with gulp.src
  .pipe(aGulpPlugin()) // Sends it through a gulp plugin
  .pipe(gulp.dest('destination')) // Outputs the file in the destination folder
})</pre><p><code>gulp.src</code> tells the Gulp task what files to use for the task, while <code>gulp.dest</code>tells Gulp where to output the files once the task is completed.</p>
<p>Now, let&#8217;s run a task to compile the Sass.</p>
<p>In terminal</p><pre class="crayon-plain-tag">$ npm install gulp-sass --save-dev</pre><p>In Gulpfile.js, we’ll write:</p><pre class="crayon-plain-tag">var sass = require('gulp-sass');
/**
 * Compile Sass.
 */
gulp.task('sass', function() {
    return gulp.src('./sass/*.scss') // Create a stream in the directory where our Sass files are located.
    .pipe(sass())                    // Compile Sass into style.css.
    .pipe(gulp.dest('./'));          // Write style.css to the project's root directory.
});</pre><p>A simple task which can be used to compile Sass and create <em>style.css</em>!</p>
<p>To execute [‘sass’], simply type the following command into your terminal:</p><pre class="crayon-plain-tag">gulp sass</pre><p>Gulp can automatically compile Sass each time we save a Sass file</p><pre class="crayon-plain-tag">/**
 * Watch the Sass directory for changes.
 */
gulp.task('watch', function() {
  gulp.watch('./sass/*.scss', ['sass']);  // If a file changes, re-run 'sass'
});</pre><p>In your terminal, simply type</p><pre class="crayon-plain-tag">gulp watch</pre><p>Now, anytime you make changes and save any file with a .scss extension, it will trigger this [‘watch’]<strong> </strong>task which executes [‘sass’].</p>
<p>Gulp is a task runner that uses Node.js as a platform. Gulp purely uses the JavaScript code and helps to run front-end tasks and large-scale web applications. It builds system automated tasks like CSS and HTML minification, concatenating library files, and compiling the SASS files. These tasks can be run using Shell or Bash scripts on the command line.</p>
<h2></h2>
<h2>Reference</h2>
<ul>
<li><a href="https://teamtreehouse.com/library/gulp-basics">https://teamtreehouse.com/library/gulp-basics</a></li>
<li><a href="https://gulpjs.com/">https://gulpjs.com/</a></li>
</ul>
<p>The post <a rel="nofollow" href="/gulp/">Gulp</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/gulp/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Background Workers using Crontab</title>
		<link>/background-workers-using-crontab/</link>
				<comments>/background-workers-using-crontab/#comments</comments>
				<pubDate>Wed, 27 Sep 2017 06:17:21 +0000</pubDate>
		<dc:creator><![CDATA[tony]]></dc:creator>
				<category><![CDATA[DevOps]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3910</guid>
				<description><![CDATA[<p>Scheduling background jobs is a common task in rails application development. Eventually what we want is a cron job which runs the schedule jobs. cron is the system process which will automatically perform tasks for you according to a set schedule. The schedule is called the crontab, which is also the name of the program&#8230;</p>
<p>The post <a rel="nofollow" href="/background-workers-using-crontab/">Background Workers using Crontab</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Scheduling background jobs is a common task in rails application development. Eventually what we want is a cron job which runs the schedule jobs.</p>
<p><b>cron</b> is the system process which will automatically perform tasks for you according to a set schedule. The schedule is called the <b>crontab</b>, which is also the name of the program used to edit that schedule.</p>
<p>For example, let&#8217;s say you have a rake task which you want to run every hour.</p><pre class="crayon-plain-tag">namespace :send_update_mail do
  desc "send_product_update_mails"
  task :send_mail =&gt; :environment do
    UserMailer.notify_product_updates
  end
end</pre><p>To edit the crontab, use this command:</p><pre class="crayon-plain-tag">crontab -e</pre><p>Now let&#8217;s add our job to the crontab. Each job you add should take up a single line.</p>
<p>The format is very simple: six pieces of information, each separated by a space; the first five pieces of information tell <b>cron </b>when to run the job, and the last piece of information tells <b>cron</b> what the job is.</p><pre class="crayon-plain-tag">m h  dom mon dow   command</pre><p><i>m</i>, representing the minute of the hour, <i>h</i>, representing the hour of the day, <i>dom</i>, representing the day of the month, <i>mon</i>, representing the month of the year, <i>dow</i>, representing the day of the week and  <i>command</i>, which is the command to be run. For example in our case</p><pre class="crayon-plain-tag">0 * * * * /home/myname/myapp/lib/tasks/send_mail.rb</pre><p>The asterisks (&#8220;<b>*</b>&#8220;) will tell cron that for that unit of time, the job should run &#8216;every&#8217;. Save and close the file.</p>
<p>And that&#8217;s it.</p>
<p>But sometimes fiddling with crontab on the server can be very hectic and it would be much better if we can configure cron job in our rails application so we can keep the configuration in our source control.</p>
<p>We have a gem called <a href="https://github.com/javan/whenever">whenever</a> that allows us to set up cron jobs from within our Rails apps using Ruby code. Let&#8217;s see how you can schedule our background jobs in Rails using Whenever to set up your schedule.</p>
<p>Add in your Gemfile.</p><pre class="crayon-plain-tag">gem 'whenever', :require =&gt; false</pre><p>Run <span style="font-family: monospace;">bundle install</span> to install the gem.</p>
<p>Run the <code>wheneverize</code> command in your app’s root folder to set up an initial configuration.</p><pre class="crayon-plain-tag">wheneverize .</pre><p>The <em>wheneverize</em> command will create an initial <code>config/schedule.rb</code> file.</p>
<p>Now add following to <em>schedule.rb</em></p><pre class="crayon-plain-tag">every 1.hour do
  rake 'send_update_mail:send_mail'
end</pre><p></p>
<h3>A whenever plugin for mina</h3>
<p>The gem <code>mina-whenever</code>is a whenever plugin for <a href="https://github.com/mina-deploy/mina">mina</a>.</p>
<p>Add this line to your application&#8217;s Gemfile and run <code>bundle install</code></p><pre class="crayon-plain-tag">gem 'mina-whenever'</pre><p>Modify your deploy.rb</p>
<div class="highlight highlight-source-ruby">
<pre class="crayon-plain-tag">require 'mina/whenever'

desc "Deploys the current version to the server."
task :deploy do
  deploy do
    .........

    on :launch do
      invoke :'sidekiq:restart'
      .....
    end
  end
end</pre></p>
<h2>Drawback</h2>
<p>This rake task-based approach can have a potential drawback of extra memory consumption. When crontab runs <code>rake</code> or <code>rails runner</code>, it is booting up a full instance of our rails application to access relevant models and associations. It is memory expensive especially when your code base is huge and using a considerable number of gems. In a nutshell, the entire app and dependencies are loaded for every task that runs.</p>
<p>Imagine if you have scheduled <code>n</code> number of background workers to start at a given point of time in our main application server. This could end up being too resource expensive that our application might become unusable for the user.</p>
<h2>How to fix?</h2>
<p>1) Start another server to schedule jobs and another server to consume the jobs.</p>
<p>2) Create another Ruby project that would add the messages to our Redis queue to schedule the tasks.</p>
<p>3) Offload that to another language like Crystal, which is more efficient and schedule jobs independent of our Rails app.</p>
<p>4)  Use a sidekiq or other background job to schedule which takes less RAM</p>
<p>1st would be the easiest solution as it would keep our codebase same. (Heroku works like this)<br />
2nd and 3rd are recommended if you are looking to keep it on a single server and keep the cost down until the business scale.</p>
<p>&nbsp;</p>
<h2>References</h2>
<ul>
<li><a href="http://ruthienachmany.github.io/blog/2013/08/10/sidekiq-redis-cron-jobs/">http://ruthienachmany.github.io/blog/2013/08/10/sidekiq-redis-cron-jobs/</a></li>
<li><a href="https://github.com/javan/whenever">https://github.com/javan/whenever</a></li>
</ul>
</div>
<p>The post <a rel="nofollow" href="/background-workers-using-crontab/">Background Workers using Crontab</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/background-workers-using-crontab/feed/</wfw:commentRss>
		<slash:comments>4</slash:comments>
							</item>
		<item>
		<title>Cheat sheet for managing files from Ruby</title>
		<link>/cheat-sheet-for-managing-files-from-ruby/</link>
				<comments>/cheat-sheet-for-managing-files-from-ruby/#comments</comments>
				<pubDate>Fri, 22 Sep 2017 17:34:15 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Rails]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1596</guid>
				<description><![CDATA[<p>In this Cheat sheet, you will learn managing files from Ruby. Files are used for storing the Data for a Long time Period. And the files can contain any type of information means they can Store the text, any Images or Pictures or any data in any Format. It is associated with class IO File&#8230;</p>
<p>The post <a rel="nofollow" href="/cheat-sheet-for-managing-files-from-ruby/">Cheat sheet for managing files from Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>In this Cheat sheet, you will learn managing files from Ruby.</p>
<p>Files are used for storing the Data for a Long time Period. And the files can contain any type of information means they can Store the text, any Images or Pictures or any data in any Format. It is associated with class IO File includes.</p>
<h2><span id="Creating_a_New_File_with_Ruby" class="mw-headline">Creating a New File</span></h2>
<p>New files are created in Ruby using the <i>new</i> method of the <i>File</i> class. The <i>new</i> method accepts two arguments, the first being the name of the file to be created and the second being the mode in which the file is to open. Like,</p>
<p>file = File.new(&#8220;filename&#8221;, &#8220;mode&#8221;)</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new("file.txt", "w")</pre><p>Supported modes are:</p>
<table style="height: 206px;" border="1" width="314" cellspacing="0">
<tbody>
<tr>
<td>r</td>
<td>Read only access.</td>
</tr>
<tr>
<td>r+</td>
<td>Read and write access.</td>
</tr>
<tr>
<td>w</td>
<td>Write only access.</td>
</tr>
<tr>
<td>w+</td>
<td>Read and write access.</td>
</tr>
<tr>
<td>a</td>
<td>Write only access.</td>
</tr>
<tr>
<td>a+</td>
<td>Read and write access.</td>
</tr>
</tbody>
</table>
<h2><span id="Opening_Existing_Files" class="mw-headline">Opening Existing Files</span></h2>
<p>You can open the existing files using the open method.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.open(&quot;temp.txt&quot;)</pre><p>If the file is already opened, we can close it by using the close method.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file.close</pre><p></p>
<h2>Reading and Writing Files</h2>
<p>Once we&#8217;ve opened an existing file or created a new file we need to be able to read from and write to that file. We can read/write using different methods.</p>
<h3>sysread Method:</h3>
<p>You can use the method <i>sysread</i> to read the contents of a file.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r&quot;)
if file
   content = file.sysread(10)
   puts content
else
  puts &quot;cannot open the file&quot;
end</pre><p>This statement will output the first 10 characters of the file.</p>
<h3>syswrite Method:</h3>
<p>You can use the method syswrite to write the contents into a file.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r+&quot;)
if file
   file.syswrite(&quot;Hello&quot;)
else
   puts &quot;Unable to open file!&quot;
end</pre><p>It writes &#8216;Hello&#8217; into the file input.txt.</p>
<h3>each_byte Method:</h3>
<p>This method belongs to the class <i>File</i>. The method <i>each_byte</i> is always associated with a block.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r+&quot;)
if file
   file.syswrite(&quot;ABCDEF&quot;)
   file.each_byte {|ch| putc ch }
else
   puts &quot;Unable to open file!&quot;
end</pre><p>Characters are passed one by one to the variable ch and then displayed on the screen.</p>
<h3>IO.readlines Method:</h3>
<p>The class <i>File</i> is a subclass of the class IO. This method returns the contents of the file line by line.</p>
<p>Eg:</p><pre class="crayon-plain-tag">arr = IO.readlines(&quot;input.txt&quot;)
puts arr[0]
puts arr[1]</pre><p>Each line of the file <i>input.txt</i> will be an element in the array arr. Therefore, arr[0] will contain the first line, whereas arr[1] will contain the second line of the file.</p>
<h3>IO.foreach Method:</h3>
<p>This method also returns output line by line. The difference between the method <i>foreach</i> and the method <i>readlines</i> is that the method <i>foreach</i> is associated with a block.</p>
<p>Eg:</p><pre class="crayon-plain-tag">IO.foreach(&quot;input.txt&quot;){|block| puts block}</pre><p>This code will pass the contents of the file <i>test</i> line by line to the variable block, and then the output will be displayed on the screen.</p>
<h2><span id="Renaming_and_Deleting_Files_in_Ruby" class="mw-headline">Renaming and Deleting Files</span></h2>
<p>Files are renamed and deleted in Ruby using the <i>rename</i> and <i>delete</i> methods respectively. For example, we can create a new file, rename it and then delete it:</p><pre class="crayon-plain-tag">File.new("tempfile.txt", "w")
=&gt; #&lt;File:tempfile.txt&gt;

File.rename("tempfile.txt", "newfile.txt")
=&gt; 0

File.delete("newfile.txt")
=&gt; 1</pre><p></p>
<h2>References</h2>
<ul>
<li><span style="color: #333399;"><a style="color: #333399;" href="https://www.tutorialspoint.com/ruby/ruby_input_output.html">https://www.tutorialspoint.com/ruby/ruby_input_output.html</a></span></li>
<li><span style="color: #333399;"><a style="color: #333399;" href="http://www.techotopia.com/index.php/Working_with_Files_in_Ruby">http://www.techotopia.com/index.php/Working_with_Files_in_Ruby</a></span></li>
<li><span style="color: #333399;"><a style="color: #333399;" href="https://ruby-doc.org/core-2.2.2/File.html">https://ruby-doc.org/core-2.2.2/File.html</a></span></li>
</ul>
<p>The post <a rel="nofollow" href="/cheat-sheet-for-managing-files-from-ruby/">Cheat sheet for managing files from Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/cheat-sheet-for-managing-files-from-ruby/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
	</channel>
</rss>
