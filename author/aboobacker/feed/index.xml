 <?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>aboobacker &#8211; Red Panthers</title>
	<atom:link href="/author/aboobacker/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Experts in Ruby on Rails Development</description>
	<lastBuildDate>Tue, 31 Jan 2017 07:32:26 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.7</generator>

<image>
	<url>/wp-content/uploads/2017/12/rp-logo.png</url>
	<title>aboobacker &#8211; Red Panthers</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Behind the scenes of hash table performance in ruby 2.4</title>
		<link>/behind-scenes-hash-table-performance-ruby-2-4/</link>
				<comments>/behind-scenes-hash-table-performance-ruby-2-4/#comments</comments>
				<pubDate>Tue, 31 Jan 2017 07:32:26 +0000</pubDate>
		<dc:creator><![CDATA[aboobacker]]></dc:creator>
				<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby 2.4]]></category>
		<category><![CDATA[Hash]]></category>
		<category><![CDATA[hashtables]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=922</guid>
				<description><![CDATA[<p>Ruby 2.4 got released this Christmas with a lot of exciting features. One of the most underrated features in ruby 2.4 is hash table improvements. Before going into details about implementation, let&#8217;s first check the benchmark to know how this change gonna affect your ruby application. Some benchmarks are: Getting keys and values of a&#8230;</p>
<p>The post <a rel="nofollow" href="/behind-scenes-hash-table-performance-ruby-2-4/">Behind the scenes of hash table performance in ruby 2.4</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><strong>Ruby 2.4</strong> got released this Christmas with a lot of exciting features. One of the most underrated features in ruby 2.4 is hash table improvements. Before going into details about implementation, let&#8217;s first check the benchmark to know how this change gonna affect your ruby application.</p>
<p>Some benchmarks are:</p>
<h4 id="gettingkeysandvaluesofahash">Getting keys and values of a hash</h4>
<p></p><pre class="crayon-plain-tag">h = {}

10000.times do |i|
  h[i] = nil
end

# Get all hash values
Benchmark.measure { 50000.times { h.values } }

# Get all hash keys
Benchmark.measure { 50000.times { h.keys } }</pre><p>Output</p>
<p>Ruby 2.3.3</p><pre class="crayon-plain-tag">=&gt; #&lt;Benchmark::Tms:0x00000002a0f990 @label="", @real=2.8023432340005456, @cstime=0.0, @cutime=0.0, @stime=0.13000000000000012, @utime=2.6799999999999997, @total=2.8099999999999996&gt;
#&lt;Benchmark::Tms:0x00000002963398 @label="", @real=2.767410662000657, @cstime=0.0, @cutime=0.0, @stime=0.029999999999999805, @utime=2.729999999999997, @total=2.7599999999999967&gt;</pre><p>&nbsp;</p>
<p>ruby 2.4.0</p><pre class="crayon-plain-tag">#&lt;Benchmark::Tms:0x0000000226d700 @label="", @real=0.8854832770002758, @cstime=0.0, @cutime=0.0, @stime=0.08999999999999997, @utime=0.7999999999999998, @total=0.8899999999999998&gt;
#&lt;Benchmark::Tms:0x000000022b1018 @label="", @real=0.8476084579997405, @cstime=0.0, @cutime=0.0, @stime=0.06999999999999995, @utime=0.7799999999999994, @total=0.8499999999999993&gt;</pre><p>Yeah, the above two operations executed <strong>~ 3 times</strong> faster on my laptop. Though these numbers can vary with your machine and processor, the performance improvements will be significant on all modern processors. Not all operations became 3 times faster , average perfomence improvement is more than<strong> 50%</strong></p>
<p>If you are a ruby developer and excited to know what are the new features in ruby 2.4, then this feature gonna make your application faster and you don&#8217;t have to change anything in the code for that. Because these changes are <strong>backward compatible</strong>. If you are curious to know what happened behind the scenes of this performance boost, then continue reading.</p>
<h2 id="hashtable">Hash Table</h2>
<blockquote><p>In computing, hash table (hash map) is a data structure that is used to implement an associative array, a structure that can map keys to values. Hash table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. <a href="https://en.wikipedia.org/wiki/Hash_table">Wikipedia</a></p></blockquote>
<p>In other words, it is a data structure that allows you to store key value pair and helps to fetch specific data using the key in an efficient way. Unlike arrays, you don&#8217;t have to iterate through all elements to find a given element in the hash. If you are new to this data structure, check this <a href="https://www.youtube.com/watch?v=h2d9b_nEzoA">cs50 video</a> for a better understanding.</p><pre class="crayon-plain-tag">hash = {key1: value1, key2: value2}</pre><p>That is cool right! Now, let&#8217;s see how this is made possible in ruby.</p>
<h3 id="pre24">Pre 2.4</h3>
<p>Let&#8217;s first check how ruby implemented Hash in pre 2.4 <img class="alignnone" src="http://i.imgur.com/zGSViFd.png" alt="old hash representation , hash table" width="703" height="479" /></p>
<p>Ruby internally uses a structure called st_<em>table to represent hash. st_</em>table contains type, the number of bins, the number of entries and pointers to bin array. Bin array is an array with 11 default size and can grow when required. Let&#8217;s take an example of hash and see how it will be represented using above diagram.</p><pre class="crayon-plain-tag">sample_hash = {a: 10, b: 20, c: 30, d: 40, e: 50}</pre><p>Let&#8217;s take keys :c and :d</p>
<p><strong>Step 1:</strong></p>
<p>First thing ruby does is it will take the hash of the key using the internal hash function.</p><pre class="crayon-plain-tag">2.3.1 :075 &gt; :c.hash
=&gt; 2782
2.3.1 :076 &gt; :d.hash
=&gt; 2432</pre><p><strong>Step 2:</strong> After getting the hash value, result ?it  takes modulo of 11 to get figure in which bin ruby can store the given pair</p><pre class="crayon-plain-tag">2.3.1 :073 &gt; :c.hash % 11
=&gt; 10
2.3.1 :074 &gt; :d.hash % 11
=&gt; 1</pre><p>This means we can put :c =&gt; 30 in 10&#8217;th bin and :d in 1st bin</p>
<p><strong>Step 3</strong></p>
<p>What if there are multiple modulo operations that give the result? This is called hash collision. To resolve this, ruby uses a separate chaining approach  i.e, it will make a doubly linked list and add it to the existing value in the bin.</p>
<p><strong>Step 4</strong></p>
<p>What if the hash is too large ?? Linked list will start growing and will make the hash slower. So, ruby will allocate more bins and do an operation called <strong>Rehashing</strong> to utilise newly added bins.</p>
<p><span id="wmd-input-section-15489" class="wmd-input-section"><span class="token p"><span class="token strong"><strong>Improvements in 2.0</strong></span></span></span><span id="wmd-input-section-15489" class="wmd-input-section"></span></p>
<p><span id="wmd-input-section-15489" class="wmd-input-section"><span class="token p">In ruby 2.0, Ruby eliminated the need for extra data structures for smaller hashes and uses linear search for better performance.</span></span><span id="wmd-input-section-15489" class="wmd-input-section"></span></p>
<p><strong><span id="wmd-input-section-15489" class="wmd-input-section"><span class="token p"><span class="token strong">Improvements in 2.2</span></span></span></strong></p>
<p><span id="wmd-input-section-15489" class="wmd-input-section"></span><span id="wmd-input-section-15489" class="wmd-input-section"><span class="token p">In 2.2.0, Ruby has used bin array sizes that correspond to powers of two (16, 32, 64, 128, &#8230;).</span> </span></p>
<h3 id="changesin24">Changes in 2.4</h3>
<div id="attachment_1629" style="width: 310px" class="wp-caption aligncenter"><a href="http://blog.redpanthers.co/wp-content/uploads/2016/12/hash.png"><img aria-describedby="caption-attachment-1629" class="wp-image-1629 size-medium" src="http://blog.redpanthers.co/wp-content/uploads/2016/12/hash-300x201.png" alt="new hash structure in ruby 2.4 , hash table" width="300" height="201" /></a><p id="caption-attachment-1629" class="wp-caption-text">Source: https://github.com/ruby/ruby/blob/trunk/st.c</p></div>
<p>In ruby 2.4, Hash table is moved to <a href="https://en.wikipedia.org/wiki/Open_addressing">open addressing model</a> i.e, we no longer have the separate doubly linked list for collision resolution. Here, we will be storing records in the entries array itself i.e, there is no need of pointer chasing and data will be stored in the adjacent memory location (Data locality). The hash table has two arrays called bins and entries. Entry array contains hash entries in the order of insertion and the bin array provides access to entry the by their keys. The key hash is mapped to a bin containing the index of the corresponding entry in the entry array.</p>
<p>&nbsp;</p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p"><span class="token strong"><strong>Inserting entries in Hash</strong></span></span></span><span id="wmd-input-section-13012" class="wmd-input-section"></span></p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p">Step 1:</span></span></p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p">Ruby will insert an entry to entries array in sequential order.</span></span><span id="wmd-input-section-13012" class="wmd-input-section"></span></p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p">Step 2:</span></span><span id="wmd-input-section-13012" class="wmd-input-section"></span></p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p">Ruby will identify the bin from which the entry is to be mapped. Ruby uses first few bits of the hash as the bin index, Explaining the whole process is beyond the scope of this article. You can check the logic in MRI source code <a href="https://github.com/ruby/ruby/blob/trunk/st.c#L971"><span class="token link"><span class="token md md-bracket-start">here</span></span></a></span></span><span id="wmd-input-section-13012" class="wmd-input-section"></span></p>
<p><span id="wmd-input-section-13012" class="wmd-input-section"><span class="token p"><span class="token strong"><strong>Accessing element by key</strong></span> </span></span></p>
<p>Let&#8217;s examine it with a sample hash **</p><pre class="crayon-plain-tag">sample_hash = {a: 10, b: 20, c: 30, d: 40, e: 50}</pre><p>Here, ruby will create two internal arrays, entries and bins as shown below</p><pre class="crayon-plain-tag">entries = [[2297,a,10], [451,b,20], [2782,c,30], [2432,d,40],[1896,e,50]]</pre><p>each record in entries array will contain a hash, key, and value respectively</p>
<p>Default bin size in ruby is 16 so Bins array for the above hash will be somewhat like this</p><pre class="crayon-plain-tag">bins = [
3,
nil,
nil,
nil,
1,
nil,
nil,
nil,
5,
0,
nil,
nil,
nil,
nil,
2,
nil
]</pre><p>Now what if we want to fetch an element from hash, say &#8216;c&#8217;</p><pre class="crayon-plain-tag">sample_hash[:c]</pre><p>Step 1:</p>
<p>Find the hash using ruby&#8217;s internal hash function</p><pre class="crayon-plain-tag">:c.hash
2782</pre><p>Step 2</p>
<p>Find the location in bin array by using <a href="https://github.com/ruby/ruby/blob/trunk/st.c#L971">find bin method</a></p><pre class="crayon-plain-tag">find_bin(2782)</pre><p>Step 3</p>
<p>Find the location entries array using bin array</p><pre class="crayon-plain-tag">bins[14] =&gt; 2</pre><p>&nbsp;</p>
<p>Step 4. Find the entry using the key we got</p><pre class="crayon-plain-tag">entries[2] =&gt; [2782,c,30]</pre><p>&nbsp;</p>
<p>Now we have value for the key &#8216;c&#8217; without iterating through all the records</p>
<h4 id="iclassicontrashideletinganitem"><i class="icon-trash"></i> Deleting an item</h4>
<p>If the item to be deleted is first one, then ruby will change the index of &#8216;current first entry &#8216;, otherwise ruby will mark the item as reserved using a reserved hash value.</p>
<p>In the ruby source code, DELETED is marked using 0 and EMPTY is marked using 1.</p>
<p>To <strong>summarise</strong> this approach made hash implementation in ruby faster because the new bins array stores much smaller reference to the entries instead of storing entries themselves. Hence, it can take advantage of the modern processor caching levels</p>
<p>** Small hashes will use the linear search to find entries from ruby 2.0 onwards to avoid extra overhead and improve performance. Given example is just for reference only.</p>
<p>References</p>
<ol>
<li><a href="https://bugs.ruby-lang.org/issues/12142">https://bugs.ruby-lang.org/issues/12142</a></li>
<li><a href="https://blog.heroku.com/ruby-2-4-features-hashes-integers-rounding#hash-changes">https://blog.heroku.com/ruby-2-4-features-hashes-integers-rounding#hash-changes</a></li>
<li><a href="https://en.wikipedia.org/wiki/Hash_table">https://en.wikipedia.org/wiki/Hash_table</a></li>
<li><a href="http://patshaughnessy.net/ruby-under-a-microscope">http://patshaughnessy.net/ruby-under-a-microscope</a></li>
</ol>
<p>The post <a rel="nofollow" href="/behind-scenes-hash-table-performance-ruby-2-4/">Behind the scenes of hash table performance in ruby 2.4</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/behind-scenes-hash-table-performance-ruby-2-4/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
							</item>
	</channel>
</rss>
