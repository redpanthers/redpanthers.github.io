 <?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Rails 5 &#8211; Red Panthers</title>
	<atom:link href="/category/rails-5/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Experts in Ruby on Rails Development</description>
	<lastBuildDate>Tue, 22 Aug 2017 07:28:43 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.7</generator>

<image>
	<url>/wp-content/uploads/2017/12/rp-logo.png</url>
	<title>Rails 5 &#8211; Red Panthers</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Make unit tests great again &#8211; Integrate Jasmine into Rails</title>
		<link>/write-beautiful-jasmine-tests-rails/</link>
				<comments>/write-beautiful-jasmine-tests-rails/#comments</comments>
				<pubDate>Tue, 22 Aug 2017 07:28:43 +0000</pubDate>
		<dc:creator><![CDATA[alan]]></dc:creator>
				<category><![CDATA[Jasmine]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[Rails 5]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby 2.4]]></category>
		<category><![CDATA[better tests]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[karma]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[test]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3149</guid>
				<description><![CDATA[<p>Jasmine is a framework to write tests for the Javascript code in the Behaviour Driven Development (BDD) style. In this article, you will learn how to integrate Jasmine into your existing rails application and how to write clean and beautiful unit tests. Let us make tests great again! &#160; Install Jasmine To make Jasmine available&#8230;</p>
<p>The post <a rel="nofollow" href="/write-beautiful-jasmine-tests-rails/">Make unit tests great again &#8211; Integrate Jasmine into Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Jasmine is a framework to write tests for the Javascript code in the Behaviour Driven Development (BDD) style. In this article, you will learn how to integrate Jasmine into your existing rails application and how to write clean and beautiful unit tests. Let us make tests great again!</p>
<p>&nbsp;</p>
<h2>Install Jasmine</h2>
<p>To make Jasmine available to your Rails app, you just have to place the jasmine-gem (<a href="https://github.com/jasmine/jasmine-gem">link</a>) in your Gemfile. That will do the magic. Just make sure you have it under Development and Test group in the Gemfile as follows:</p><pre class="crayon-plain-tag">group :development, :test do
  gem "jasmine"
end</pre><p>Then run this to install the gem:</p><pre class="crayon-plain-tag">bundle install</pre><p>After all the gems are installed, run this code to generate necessary files for Jasmine to run:</p><pre class="crayon-plain-tag">rails generate jasmine:install</pre><p>This will create the jasmine helper file and the yml file where you configure how it should run the tests.</p>
<h2>Run tests</h2>
<p>You can use Jasmine right after it&#8217;s installed. It can be run in several ways, the most important ones being,</p>
<ol>
<li>In your browser</li>
<li>Continuous Integration Mode (CI)</li>
</ol>
<p>The CI mode is usually used when you have to integrate it into your build system.</p>
<h2>Browser Mode</h2>
<p>You have to start the Jasmine server to run it in a browser. This server runs all the tests and serves the results to a webpage. Run this to start the Jasmine Server:</p><pre class="crayon-plain-tag">rake jasmine</pre><p>With the default settings, you can view the output in:</p><pre class="crayon-plain-tag">http://localhost:8888/</pre><p>But this page would be pretty empty since you don&#8217;t have any tests written for your Javascript code. There is a method provided to generate sample tests. Try running this:</p><pre class="crayon-plain-tag">rails generate jasmine:examples</pre><p>Now refresh the webpage and you can see something similar to this:</p>
<p><a href="https://blog.redpanthers.co/wp-content/uploads/2017/08/Screen-Shot-2017-08-21-at-3.47.22-PM.png"><img class="aligncenter wp-image-3152" src="https://blog.redpanthers.co/wp-content/uploads/2017/08/Screen-Shot-2017-08-21-at-3.47.22-PM-300x91.png" alt="Jasmine test page" width="768" height="233" /></a></p>
<h3>Configurable Settings</h3>
<p>Clicking on the options button in the top right corner will display a list of options that change how Jasmine runs the tests. Let&#8217;s get into each one of them:</p>
<h4>Raise Exceptions</h4>
<p>This option disables the error catching mechanism of Jasmine in the JavaScript source code and in the test file. The default setting is to wrap all the errors in a catch block.</p>
<h4>Stop Spec on Expectation Failure</h4>
<p>With this option turned on, Jasmine will stop the test at the first occurrence of an error. The default setting is to run the full test suit and then display all the tests which fail.</p>
<h4>Run Tests in Random Order</h4>
<p>This option enables the test to be run in a random sequence every time the test runs. The benefit of enabling this option is to reveal dependencies between tests, therefore, you can reduce test dependencies and each test will have good isolation.</p>
<h2>Continous Integration Mode</h2>
<p>A headless browser is used to integrate Jasmine into your continuous integration workflow. To make our lives easier, this gem that we are using supports integration with a headless browser out of the box. The default headless browser is <a href="http://phantomjs.org/">Phantom JS</a>. So it will download automatically if not installed when you try to run in CI mode. Run this code to run in CI mode:</p><pre class="crayon-plain-tag">rake jasmine:ci</pre><p>By default, Jasmine will attempt to find a random open port. To set a default port manually, just add this to the <strong>jasmine_helper.rb</strong></p><pre class="crayon-plain-tag">Jasmine.configure do |config|
   config.ci_port = 1234
end</pre><p></p>
<h2>Configuration</h2>
<p>The two files which you should be looking into, if you need to alter the behavior of tests are:</p>
<ul>
<li>jasmine.yml</li>
<li>jasmine_helper.rb</li>
</ul>
<p>Jasmine reads the jasmine.yml first and then overrides it with the settings mentioned in jasmine_helper.rb</p>
<h4>Sample configuration:</h4>
<p></p><pre class="crayon-plain-tag"># spec/javascripts/support/jasmine.yml
random: true
show_console_log: false
stop_spec_on_expectation_failure: true</pre><p></p><pre class="crayon-plain-tag"># spec/javascripts/support/jasmine_helper.rb
Jasmine.configure do |config|
  config.random = false
  config.show_console_log = false
  config.stop_spec_on_expectation_failure: false

  config.show_full_stack_trace = false
  config.prevent_phantom_js_auto_install = false
end</pre><p></p>
<h2>Testing</h2>
<p>Writing tests for Javascript in a Rails app should be fairly straightforward as it uses same standards as Jasmine in general. But there are things that need to be considered specific to a Jasmine installation in Rails.</p>
<h3>Testing JavaScript</h3>
<p>Test files for JavaScript in a rails application reside in the <strong>spec/javascripts</strong> folder. For each javascript file, you need to put the test file in the same path as the file. For example, if you have the following javascript file in your app:</p>
<p><strong>app/assets/javascripts/jasmine_examples/Calculator.js</strong></p>
<p>You place the spec file in the following path:</p>
<p><strong>spec/javascripts/jasmine_examples/CalculatorSpec.js</strong></p>
<p>Jasmine will include the test on the next test run. There is no configuration to have your test run.</p>
<h2>Plugins worth considering</h2>
<ul>
<li><strong>Jasmine-Jquery</strong> &#8211; this plugin provides a lot of jquery related matchers. Download it <a href="https://github.com/velesin/jasmine-jquery/releases">here</a></li>
<li><strong>Jasmine-Matchers</strong> &#8211; a tool to provide additional matchers. Download it <a href="https://github.com/JamieMason/Jasmine-Matchers/releases">here</a></li>
<li><strong>Jasmine-Fixture &#8211; </strong>a plugin that provides DOM creation using CSS selectors, therefore you can interact with the DOM much easier. Download it <a href="https://github.com/searls/jasmine-fixture/releases">here</a></li>
</ul>
<h1>Write Beautiful Unit tests</h1>
<p>95% of the developers I know write unit tests in order to prevent defects from being deployed to production. But the essential ingredients to a great unit test is unknown to most of them. There have been countless times that I&#8217;ve seen a test fails, only to investigate and discover that I have no idea what feature the developer was trying to test, let alone how it went wrong or why it matters.</p>
<h2>Importance of Test Discipline</h2>
<p>Your tests are the best set of weapons to defend your code from bugs. They are more important that linting and static analysis. A few reasons why tests are your secret weapon:</p>
<ul>
<li>Writing tests first gives you a clearer perspective on the ideal API design.</li>
<li>Does the developer understand the problem enough to articulate in code all critical component requirements?</li>
<li>Manual QA is error-prone. In my experience, it’s impossible for a developer to remember all features that need testing after making a change to refactor, add new features, or remove features.</li>
<li>Continous Integration prevents failed builds from getting deployed to production.</li>
</ul>
<h2>Bug Report vs plain Unit Test</h2>
<p>The test fail report comes to save your life when a test fails. So you better make it loud and clear. I came up with a list of must-have info in your bug report.</p>
<ul>
<li>What are you trying to test?</li>
<li>What should it do?</li>
<li>What is the real-time output (actual behavior)?</li>
<li>What is the expected output (expected behavior)?</li>
</ul>
<p>Here is a sample test with all of these info:</p><pre class="crayon-plain-tag">describe("CalculatorAddMethod", function() {

  var calculator = new Calculator();

  it("should return number", function() {
    const actual = typeof Calculator.add(5,10);
    const expected = 'number'
    expect(actual).toEqual(expected);
  });

});</pre><p>This test suit answers all the questions above. Let&#8217;s go through each one of them.</p>
<ul>
<li>What are you trying to test?
<ul>
<li>-&gt; Go for the test description. It is testing for the return type of the add method of Calculator().</li>
</ul>
</li>
<li>What should it do?
<ul>
<li>-&gt; Again, look at the test description. It clearly says that it is testing for the return type of add method.</li>
</ul>
</li>
<li>What is the actual output?
<ul>
<li>-&gt; There is a dedicated variable which holds the actual result and how you got the actual result. TWO FOR ONE!</li>
</ul>
</li>
<li>What is the expected output?
<ul>
<li>-&gt; Again, there is a dedicated variable which holds the actual result. Straight as a ruler!</li>
</ul>
</li>
</ul>
<h2>Make your tests even better</h2>
<p>This is from my experiences and the knowledge I gained from good articles. This worked for me in the long run even if I find it a little difficult to implement when I started. <strong>Write every single test using toEqual()</strong>. Don&#8217;t worry about the quality impact on your test suit. It will get better with exercise.</p>
<h2>Easter Egg</h2>
<p>This method I suggested would answer one more question, which is by far the most important question I guess. <strong>How can you reproduce the test?</strong> The <strong>const actual </strong>holds the answer to this question. Please go take a look at the variable in my sample test suit above and get delighted.</p>
<h1>Conclusion</h1>
<p>Integrating Jasmine into your Rails app is done by the <strong>jasmine-gem. </strong>This gem gives you the ability to run tests in a browser or as Continous Integration mode. The usage of right plugins will improve your productivity and helps you write tests faster and better.</p>
<p>Next time you write a test, remember to see if your test answers the following questions:</p>
<ul>
<li>What are you trying to test?</li>
<li>What should it do?</li>
<li>What is the real-time output (actual behavior)?</li>
<li>What is the expected output (expected behavior)?</li>
<li>How can be the test reproduced?</li>
</ul>
<p>The post <a rel="nofollow" href="/write-beautiful-jasmine-tests-rails/">Make unit tests great again &#8211; Integrate Jasmine into Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/write-beautiful-jasmine-tests-rails/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>application_record.rb available since rails 5</title>
		<link>/application_record-rb-available-since-rails-5/</link>
				<comments>/application_record-rb-available-since-rails-5/#respond</comments>
				<pubDate>Tue, 13 Sep 2016 06:27:31 +0000</pubDate>
		<dc:creator><![CDATA[coderhs]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[Rails 5]]></category>
		<category><![CDATA[active_record]]></category>
		<category><![CDATA[application_record]]></category>
		<category><![CDATA[base]]></category>
		<category><![CDATA[database]]></category>
		<category><![CDATA[model]]></category>
		<category><![CDATA[models]]></category>
		<category><![CDATA[pollute]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[universal]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=509</guid>
				<description><![CDATA[<p>Those who have been starting with Rails 5, must have noticed the new application_record.rb file present in your model folder. And all new models seems to be inheriting the application_record.rb instead of the ActiveRecord::Base. This is done so that we don&#8217;t pollute the ActiveRecord::Base namespace with our own extensions.  Before when we require something, say an&#8230;</p>
<p>The post <a rel="nofollow" href="/application_record-rb-available-since-rails-5/">application_record.rb available since rails 5</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Those who have been starting with Rails 5, must have noticed the new <strong>application_record.rb</strong> file present in your model folder. And all new models seems to be inheriting the <strong>application_record.rb</strong> instead of the <strong>ActiveRecord::Base. </strong>This is done so that we don&#8217;t pollute the <strong>ActiveRecord::Base</strong> namespace with our own extensions.  Before when we require something, say an extension to the ActiveRecord itself we used to have it included using the following code.</p><pre class="crayon-plain-tag">module NewFeature
  def to_do_something
    puts "I am doing something new which Active Record coudln't do before"
  end
end

ActiveRecord::Base.include(NewFeature)</pre><p>Now the problem with this approach is that when we use rails engines this NewFeature gets added in there as well, and it could end up doing things that we didn&#8217;t expect.</p>
<p>With the new application_record.rb, which would be inherited by all the models, we need to include the new module at the <strong>ApplicationRecord</strong> and it would be available as the new feature of <strong>ActiveRecord</strong>. Every new engine generated using <strong>rails plugin new</strong> would also be having their own <strong>application_reocord.rb</strong></p>
<p>One more point to note is that we can place application wide hooks in this file. So if you were to do</p><pre class="crayon-plain-tag">after_create do
  Rails.logger.info "[DataEntry] A new record has been created"
end</pre><p>it would be triggered when a new record is created in any of the models of the rails application.</p>
<p>The post <a rel="nofollow" href="/application_record-rb-available-since-rails-5/">application_record.rb available since rails 5</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/application_record-rb-available-since-rails-5/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
	</channel>
</rss>
