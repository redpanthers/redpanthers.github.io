 <?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Rails &#8211; Red Panthers</title>
	<atom:link href="/category/rails/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Experts in Ruby on Rails Development</description>
	<lastBuildDate>Thu, 16 Nov 2017 17:54:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.2.7</generator>

<image>
	<url>/wp-content/uploads/2017/12/rp-logo.png</url>
	<title>Rails &#8211; Red Panthers</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Getting started with Faraday gem</title>
		<link>/getting-started-faraday-gem/</link>
				<comments>/getting-started-faraday-gem/#respond</comments>
				<pubDate>Thu, 16 Nov 2017 17:54:51 +0000</pubDate>
		<dc:creator><![CDATA[nimmy]]></dc:creator>
				<category><![CDATA[Rails]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=4033</guid>
				<description><![CDATA[<p>&#160; Client libraries help in reducing the amount of code for the application developer who is using the API, whether a REST API or any other. By adding a set of code to the application, it provides the basic things an application needs to do in order to interact with the API. This is what a&#8230;</p>
<p>The post <a rel="nofollow" href="/getting-started-faraday-gem/">Getting started with Faraday gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>&nbsp;</p>
<p>Client libraries help in reducing the amount of code for the application developer who is using the API, whether a REST API or any other. By adding a set of code to the application, it provides the basic things an application needs to do in order to interact with the API. This is what a client library does. Also, it may handle user authentication and authorization.</p>
<p>Client libraries are developed by API developer or the community.</p>
<p>There are several HTTP client libraries in Ruby such as:</p>
<ul>
<li>
<h4><a href="https://github.com/jnunemaker/httparty">HTTParty</a></h4>
</li>
<li>
<h4><a href="https://github.com/lostisland/faraday">Faraday</a></h4>
</li>
<li>
<h4>Built-in <a href="http://ruby-doc.org/stdlib-2.2.3/libdoc/net/http/rdoc/Net/HTTP.html">Net::HTTP</a></h4>
</li>
<li>
<h4><a href="https://github.com/rest-client/rest-client">Rest-Client</a></h4>
</li>
<li>
<h4><a href="https://github.com/nahi/httpclient">HTTPClient</a></h4>
</li>
</ul>
<p>Among them, the favorite of mine is Faraday gem. Faraday has adapters for popular libraries like Net::HTTP. It is simple, flexible and supports multiple backends and embraces the concept of Rack middleware when processing the request/response cycle. Also, it&#8217;s possible to customize its behavior with middleware.</p>
<p>We will use a connection object to start with Faraday as it&#8217;s more flexible way than a simple <code>get</code>request.</p><pre class="crayon-plain-tag">conn = Faraday.new
response = conn.get 'http://localhost:3000/tasks'</pre><p>Using this connection object, we make HTTP requests.</p><pre class="crayon-plain-tag">params = {:title =&gt; 'Faraday gem', :created_by =&gt; 'blog'}
conn.post('http://localhost:3000/tasks',params)</pre><p>This will POST  title = &#8216;Faraday gem&#8217;  and created by = &#8216;blog&#8217; to http://localhost:3000/tasks.</p>
<p>All HTTP verb methods can take an optional block that will yield a<code>Faraday::Request</code> object.</p><pre class="crayon-plain-tag"> conn.post do |req|
   req.url '/tasks'
   req.headers['Content-Type'] = 'application/json'
   req.body = '{"some": "content"}'
 end</pre><p></p>
<h2>Authentication</h2>
<p>Basic and Token authentication are handled by <code>Faraday::Request::BasicAuthentication</code> and <code>Faraday::Request::TokenAuthentication</code> respectively. These can be added as middleware manually or through the helper methods.</p><pre class="crayon-plain-tag">conn.basic_auth('username', 'password')
conn.token_auth('token')</pre><p></p>
<h2>Proxies</h2>
<p>To specify an HTTP proxy:</p><pre class="crayon-plain-tag">Faraday.new(:proxy =&gt; 'http://proxy.example.com:80/')</pre><p></p>
<h2>Using a different HTTP Adapter</h2>
<p>Faraday provides an interface between our code and adapter. Sometimes we may want to use features that are not covered in Faraday&#8217;s interface. In such cases, we can have access to features specific to any of the adapters supported by Faraday, by passing a block when specifying the adapter to customize it.</p>
<p>For example, you can switch to the HTTPClient adapter as below</p><pre class="crayon-plain-tag"> conn = Faraday.new do |builder|
   builder.adapter :httpclient do |client| # yields HTTPClient
     client.keep_alive_timeout = 20
   end
 end</pre><p>Like this, we can switch to any of the supported adapters.</p>
<p>The block parameters will change based on the adapters we are using.</p>
<h2><code>Faraday::Connection</code> object middlewares</h2>
<p>A <code>Faraday::Connection</code> object has a list of middlewares, just like a Rack app. Faraday middlewares are passed as an <code>env</code> hash. It has request and response information.</p><pre class="crayon-plain-tag">conn = Faraday.new
conn.builder
=&gt; #&lt;Faraday::RackBuilder:0x0000000155d1f0 @handlers=[Faraday::Request::UrlEncoded,
   #Faraday::Adapter::NetHttp]&gt;</pre><p><code>Faraday::Builder</code> is similar to <code>Rack::Builder</code>.</p>
<p>A new <code>Faraday::Connection</code>object is initialized. It has middlewares <code> Faraday::Request::UrlEncoded</code> in front of an adapter <code>Faraday::Adapter::NetHttp</code>.  Like a Rack application, the adapter at the end of the builder chain is what actually executes the request.</p>
<p>Middlewares are grouped into request middlewares, response middlewares, and adapters.</p><pre class="crayon-plain-tag">Faraday.new do |builder|

  builder.request :retry

  builder.request :basic_authentication, 'login', 'pass'

  builder.response :logger

  builder.adapter :net_http

end</pre><p></p>
<h2>Advanced Middleware Usage</h2>
<p>The order in which middleware is stacked in Faraday is like in Rack. The first middleware on the list wraps all others, while the last middleware is the innermost one, so that’s usually the adapter.</p><pre class="crayon-plain-tag">conn = Faraday.new(:url =&gt; '/') do |builder|

  # POST/PUT params encoders:

  builder.request :multipart

  builder.request :url_encoded

  builder.adapter :net_http

end</pre><p>Middlewares stack is manipulated by the <code>Faraday::Builder</code> instance. Each <code>Faraday::Connection</code> instance has a <code>Faraday::Builder</code> instance.</p><pre class="crayon-plain-tag">conn = Faraday.new

conn.builder.swap(1, Faraday::Adapter::HTTPClient)

# replace adapter

conn.builder.insert(0, MyCustomMiddleware)

# add middleware to beginning

conn.builder.delete(MyCustomMiddleware)</pre><p></p>
<h2>Writing middleware</h2>
<p>Middlewares are classes that respond to call. When middleware is executing, it&#8217;s passed as an env hash that has request and response information. Middleware wrap the request/response cycle.</p>
<p>The general interface for a middleware is:</p><pre class="crayon-plain-tag">class CustomizedMiddleware

  def call(env)

    # do something with the request

    @app.call(env).on_complete do |env|

    # do something with the response

    end
  end
end</pre><p>All processing of the response should be done in the on-complete block. This enables middleware to work in parallel mode when many requests are occurring at the same time. After the on_complete block, env[:response] is filled in. Faraday::Response instance will be available <span class="hljs-keyword">only</span> <span class="hljs-keyword">after</span> <code><span class="hljs-string">on_complete</code>.</span></p>
<p><a href="https://github.com/lostisland/faraday_middleware">faraday-middleware</a>  is a collection of various Faraday middlewares for Faraday-based API wrappers.</p>
<p>For testing middleware, Faraday::Adapter::Test is an HTTP adapter middleware that lets you to fake responses.</p>
<p>&nbsp;</p>
<h2>References</h2>
<ul>
<li><a href="https://github.com/lostisland/faraday">https://github.com/lostisland/faraday</a></li>
</ul>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/getting-started-faraday-gem/">Getting started with Faraday gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/getting-started-faraday-gem/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Cheat sheet for managing files from Ruby</title>
		<link>/cheat-sheet-for-managing-files-from-ruby/</link>
				<comments>/cheat-sheet-for-managing-files-from-ruby/#comments</comments>
				<pubDate>Fri, 22 Sep 2017 17:34:15 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Rails]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1596</guid>
				<description><![CDATA[<p>In this Cheat sheet, you will learn managing files from Ruby. Files are used for storing the Data for a Long time Period. And the files can contain any type of information means they can Store the text, any Images or Pictures or any data in any Format. It is associated with class IO File&#8230;</p>
<p>The post <a rel="nofollow" href="/cheat-sheet-for-managing-files-from-ruby/">Cheat sheet for managing files from Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>In this Cheat sheet, you will learn managing files from Ruby.</p>
<p>Files are used for storing the Data for a Long time Period. And the files can contain any type of information means they can Store the text, any Images or Pictures or any data in any Format. It is associated with class IO File includes.</p>
<h2><span id="Creating_a_New_File_with_Ruby" class="mw-headline">Creating a New File</span></h2>
<p>New files are created in Ruby using the <i>new</i> method of the <i>File</i> class. The <i>new</i> method accepts two arguments, the first being the name of the file to be created and the second being the mode in which the file is to open. Like,</p>
<p>file = File.new(&#8220;filename&#8221;, &#8220;mode&#8221;)</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new("file.txt", "w")</pre><p>Supported modes are:</p>
<table style="height: 206px;" border="1" width="314" cellspacing="0">
<tbody>
<tr>
<td>r</td>
<td>Read only access.</td>
</tr>
<tr>
<td>r+</td>
<td>Read and write access.</td>
</tr>
<tr>
<td>w</td>
<td>Write only access.</td>
</tr>
<tr>
<td>w+</td>
<td>Read and write access.</td>
</tr>
<tr>
<td>a</td>
<td>Write only access.</td>
</tr>
<tr>
<td>a+</td>
<td>Read and write access.</td>
</tr>
</tbody>
</table>
<h2><span id="Opening_Existing_Files" class="mw-headline">Opening Existing Files</span></h2>
<p>You can open the existing files using the open method.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.open(&quot;temp.txt&quot;)</pre><p>If the file is already opened, we can close it by using the close method.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file.close</pre><p></p>
<h2>Reading and Writing Files</h2>
<p>Once we&#8217;ve opened an existing file or created a new file we need to be able to read from and write to that file. We can read/write using different methods.</p>
<h3>sysread Method:</h3>
<p>You can use the method <i>sysread</i> to read the contents of a file.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r&quot;)
if file
   content = file.sysread(10)
   puts content
else
  puts &quot;cannot open the file&quot;
end</pre><p>This statement will output the first 10 characters of the file.</p>
<h3>syswrite Method:</h3>
<p>You can use the method syswrite to write the contents into a file.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r+&quot;)
if file
   file.syswrite(&quot;Hello&quot;)
else
   puts &quot;Unable to open file!&quot;
end</pre><p>It writes &#8216;Hello&#8217; into the file input.txt.</p>
<h3>each_byte Method:</h3>
<p>This method belongs to the class <i>File</i>. The method <i>each_byte</i> is always associated with a block.</p>
<p>Eg:</p><pre class="crayon-plain-tag">file = File.new(&quot;input.txt&quot;, &quot;r+&quot;)
if file
   file.syswrite(&quot;ABCDEF&quot;)
   file.each_byte {|ch| putc ch }
else
   puts &quot;Unable to open file!&quot;
end</pre><p>Characters are passed one by one to the variable ch and then displayed on the screen.</p>
<h3>IO.readlines Method:</h3>
<p>The class <i>File</i> is a subclass of the class IO. This method returns the contents of the file line by line.</p>
<p>Eg:</p><pre class="crayon-plain-tag">arr = IO.readlines(&quot;input.txt&quot;)
puts arr[0]
puts arr[1]</pre><p>Each line of the file <i>input.txt</i> will be an element in the array arr. Therefore, arr[0] will contain the first line, whereas arr[1] will contain the second line of the file.</p>
<h3>IO.foreach Method:</h3>
<p>This method also returns output line by line. The difference between the method <i>foreach</i> and the method <i>readlines</i> is that the method <i>foreach</i> is associated with a block.</p>
<p>Eg:</p><pre class="crayon-plain-tag">IO.foreach(&quot;input.txt&quot;){|block| puts block}</pre><p>This code will pass the contents of the file <i>test</i> line by line to the variable block, and then the output will be displayed on the screen.</p>
<h2><span id="Renaming_and_Deleting_Files_in_Ruby" class="mw-headline">Renaming and Deleting Files</span></h2>
<p>Files are renamed and deleted in Ruby using the <i>rename</i> and <i>delete</i> methods respectively. For example, we can create a new file, rename it and then delete it:</p><pre class="crayon-plain-tag">File.new("tempfile.txt", "w")
=&gt; #&lt;File:tempfile.txt&gt;

File.rename("tempfile.txt", "newfile.txt")
=&gt; 0

File.delete("newfile.txt")
=&gt; 1</pre><p></p>
<h2>References</h2>
<ul>
<li><span style="color: #333399;"><a style="color: #333399;" href="https://www.tutorialspoint.com/ruby/ruby_input_output.html">https://www.tutorialspoint.com/ruby/ruby_input_output.html</a></span></li>
<li><span style="color: #333399;"><a style="color: #333399;" href="http://www.techotopia.com/index.php/Working_with_Files_in_Ruby">http://www.techotopia.com/index.php/Working_with_Files_in_Ruby</a></span></li>
<li><span style="color: #333399;"><a style="color: #333399;" href="https://ruby-doc.org/core-2.2.2/File.html">https://ruby-doc.org/core-2.2.2/File.html</a></span></li>
</ul>
<p>The post <a rel="nofollow" href="/cheat-sheet-for-managing-files-from-ruby/">Cheat sheet for managing files from Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/cheat-sheet-for-managing-files-from-ruby/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Refactoring in Rails</title>
		<link>/refactoring-in-rails/</link>
				<comments>/refactoring-in-rails/#comments</comments>
				<pubDate>Wed, 20 Sep 2017 15:31:09 +0000</pubDate>
		<dc:creator><![CDATA[nimmy]]></dc:creator>
				<category><![CDATA[Rails]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3038</guid>
				<description><![CDATA[<p>&#160; When the complexity of our Rails application increases, it becomes difficult to test and add new features. As we know, Rails is built on the principle of convention over configuration. Putting too much logic in the controller will eventually violate the single responsibility principle making future changes to the codebase difficult and error-prone. Refactoring the&#8230;</p>
<p>The post <a rel="nofollow" href="/refactoring-in-rails/">Refactoring in Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>&nbsp;</p>
<p>When the complexity of our Rails application increases, it becomes difficult to test and add new features. As we know, Rails is built on the principle of <a href="https://en.wikipedia.org/wiki/Convention_over_configuration">convention over configuration</a>. Putting too much logic in the controller will eventually violate the <a href="http://www.oodesign.com/single-responsibility-principle.html">single responsibility principle</a> making future changes to the codebase difficult and error-prone. Refactoring the code helps for quality, clarity, and maintainability.</p>
<h2>When should we refactor?</h2>
<p>Tests usually run faster with well-isolated code. Slow running tests indicate the need of more sophisticated design. For example, each class should be concerned about one unique functionality. Also, models and controllers with too many lines of code needed to be refactored to make code DRY and clean. We can use best approaches of Object Oriented Programming to achieve this.</p>
<p>Consider the following example of a controller where the whole logic for creation and deletion is concentrated.</p><pre class="crayon-plain-tag">class WebsitesController &lt; ApplicationController
  def create
    create_website
    find_or_create_user
    fetch_rank
    redirect_to root_url
  end

  def destroy
    .........
  end

.............

  private

  def create_website
    @website = website.first_or_create
    CollectionWebsite.create(collection_id: collection_id, website_id: website.id)
    @website.fetch_meta_description
  end

  def find_or_create_user
    site_urls = user.websites.map(&amp;:url)
    websites_count = user.websites.count
    user.update!(sites: site_urls, site_number: websites_count)
  end

  def fetch_rank
    return if website.alexaranks.any?
    FetchRankJob.perform_later(website)
  end
 end</pre><p>&nbsp;</p>
<h2>Moving a big controller&#8217;s action to service objects</h2>
<p>To achieve the new design, keep controllers as thin as possible and always call service objects. Controllers are a good place to have the HTTP routing, parameters parsing, authentication, calling the right service, exception catching, response formatting, and returning the right HTTP status code. A service object&#8217;s job is to hold the code for a particular bit of business logic.</p>
<p>Calling services from controllers result in many classes each of which serves a single purpose. This helps to achieve more isolation between objects. Another important thing is that service objects should be well named to show what an application does. Extracting code from controllers/models to service objects would support single responsibility principle, which leads to better design and better unit tests.</p>
<p>The above example can be rewritten by calling separate services for creating and deleting as shown below. This considerably reduces the number of lines of code in the controller and provides more clarity on the tasks performed.</p><pre class="crayon-plain-tag">class WebsitesController &lt; ApplicationController
  def create
    Websites::Create.call(website_params, current_user)
    redirect_to root_url
  end
  ..........
  def destroy
    Websites::Delete.call(website_params, current_user)
    redirect_to root_url
  end
  ..........

  private

  def website_params
    params.require(:website).permit(:url, :collection_id)
  end
end</pre><p>Now WebsitesController looks cleaner. Service objects are callable from anywhere, like from controllers as well as other service objects, DelayedJob / Rescue / Sidekiq Jobs, Rake tasks, console, etc. In app/services folder, we create services for each controller&#8217;s actions.</p>
<p>Prefer subdirectories for business-logic heavy domains.  For example, the file app/services/websites/create.rb will define Websites::Create while app/services/websites/delete.rb will define Websites::Delete.</p><pre class="crayon-plain-tag">module Websites
  class Create
    # From the controller, use it like this:
    # Websites::Create.call(params, user)
    def self.call(params, user)
      new(params, user).call
    end

    def initialize(params, user)
      @params = params
      @user = user
      @website = Website.where(url: params[:website][:url])
    end

    def call
      create_website
      find_or_create_user
      fetch_rank
    end

    private

    attr_reader :params, :user, :website

    def create_website
      @website = website.first_or_create
      CollectionWebsite.create(collection_id: collection_id, website_id: website.id)
      @website.fetch_meta_description
    end

    def find_or_create_user
      site_urls = user.websites.map(&amp;:url)
      websites_count = user.websites.count
      user.update!(sites: site_urls, site_number: websites_count)
    end

    def fetch_rank
      return if website.alexaranks.any?
      FetchRankJob.perform_later(website)
    end
  end
end</pre><p>Designing the class for a service object is relatively straightforward, since it needs no special gems and relies on the software design skills only. When the action is complex or needs to interact with an external service, service objects are really beneficial.</p>
<p style="text-align: left;">While refactoring, at each step we have to make sure that none of our tests failed.</p>
<h2>Partials and helpers</h2>
<p><strong>Partials</strong> and <strong>helpers</strong> are the standard methods to extract reusable functionality. For larger HTML code, partials can be used to split into smaller logic parts. Partials are used for side-menu, header etc.</p>
<p>When developing an application for the first time, I did notice the app/helpers directory but couldn&#8217;t find any use at that time. Generally, helpers are used for chunks of ruby code with minimal HTML or generating simple HTML from parameters. For example,  Once started using it, found it efficient in scenarios where we want to extract some complexity out of view and also if we want to reuse it or want to avoid it one day. This refers mostly to cases like conditionals or calculations.</p>
<p>Consider something like this in the view:</p><pre class="crayon-plain-tag">&lt;% if @user &amp;&amp; @user.post.present? %&gt;
  &lt;%= @user.post %&gt;
&lt;% end %&gt;</pre><p>If put it in a helper,</p><pre class="crayon-plain-tag">module SiteHelper
  def user_post(user)
    user.post if user &amp;&amp; user.post.present?
  end
end</pre><p>And then in the view code, call the helper method and pass it the user as an argument.</p><pre class="crayon-plain-tag">&lt;%= user_post(@user) %&gt;</pre><p>Views are in charge of displaying information only. They are not responsible for deciding what to display.</p>
<p>The concept of object-oriented programming paved the way for design patterns and refactoring patterns such as service objects and also <strong>decorators</strong> and <strong>presenters</strong>. Decorator patterns enable us to attach additional responsibilities to an object dynamically, without affecting other objects of same class. A presenter is a type of<em> </em>subpattern of the decorator pattern. The main difference between them is how they extract logic out of the view. Presenters are very close to the view layer, while decorators are some more broad concept.</p>
<p>Anyway, try to avoid helpers and concerns as much as possible, if you want to make objects easier to test, then Plain Ruby Objects are easier to test than helpers and concerns which are tied to Rails.</p>
<p>The presenter pattern also has the problem of making things harder to test.</p>
<p>Because of this, I prefer to use a mix of POROs (Plain Old Ruby objects) and helpers if can&#8217;t avoid having them. Always keep the minimum amount of code in helpers and move as much logic as possible into POROs. It&#8217;s the same with concerns &#8211; try to avoid them maximum, but it&#8217;s being used in larger code bases.</p>
<p>&nbsp;</p>
<div></div>
<h2>References</h2>
<ul>
<li><a href="https://github.com/adamniedzielski/service-objects-example">https://github.com/adamniedzielski/service-objects-example</a></li>
</ul>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/refactoring-in-rails/">Refactoring in Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/refactoring-in-rails/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>Rails Generators</title>
		<link>/rails-generators/</link>
				<comments>/rails-generators/#respond</comments>
				<pubDate>Mon, 18 Sep 2017 17:27:20 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[ruby on rails]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1441</guid>
				<description><![CDATA[<p>Rails generators are used to create many files for models, controllers, views, unit tests, migrations and more. It will do some of the manual work for us. So it saves time. They can also be used to set up some basic specs for the application test suite. Running rails generate(or rails g) by itself gives&#8230;</p>
<p>The post <a rel="nofollow" href="/rails-generators/">Rails Generators</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Rails generators are used to create many files for models, controllers, views, unit tests, migrations and more. It will do some of the manual work for us. So it saves time. They can also be used to set up some basic specs for the application test suite.</p>
<p>Running <tt>rails generate(or rails g)</tt> by itself gives a list of available generators:</p><pre class="crayon-plain-tag">$ rails generate
Usage: rails generate GENERATOR [args] [options]
...........
Rails:
assets
channel
controller
generator
helper
integration_test
jbuilder
job
mailer
migration
model
resource
responders_controller
scaffold
scaffold_controller
task
.............</pre><p>The main generators that rails offers are:</p>
<ul>
<li>controller: The Rails controller coordinates the interaction between the user, the views, and the model.</li>
<li>helper: Code in helpers is included in the corresponding view. We can move big loops, method calls or other logic into a method in the helper.</li>
<li>mailer: It allows for sending and receiving emails from and to your application.</li>
<li>migration: Rails Migration allows you to use Ruby to define changes to your database schema.</li>
<li>model: It is Ruby class that talk to the database, store and validate data, perform the business logic.</li>
<li>scaffold: It refers to the auto-generation of a simple set of a model, views and controller usually for a single table.</li>
</ul>
<p>Following is the list of options, which can be used along with generators:</p>
<p style="padding-left: 30px;">-h, [&#8211;help] # Print generator&#8217;s options and usage<br />
-p, [&#8211;pretend] # Run but do not make any changes<br />
-f, [&#8211;force] # Overwrite files that already exist<br />
-s, [&#8211;skip] # Skip files that already exist<br />
-q, [&#8211;quiet] # Suppress status output</p>
<h2>Generators</h2>
<p>You can create different generators by running <em>rails g</em> in the terminal. Let&#8217;s have a look at each of them.</p>
<ul>
<li>rails generate model ModellName</li>
</ul>
<p style="padding-left: 60px;">It generates the model and the associated database table. For example, we can add a new model to the app called User with fields name and age as,</p>
<p style="padding-left: 60px;">Eg:  rails g model User name: string age: integer</p>
<ul>
<li>rails generate controller ListController show edit</li>
</ul>
<p style="padding-left: 60px;">It generates controller. It is used if you are creating static views or non-CRUD related features. Let&#8217;s create a user controller that will manage the data flow and view for each users.</p>
<p style="padding-left: 60px;">Eg:  rails g controller users</p>
<ul>
<li>rails generate scaffold ModelName ControllerName</li>
</ul>
<p style="padding-left: 60px;">Generates Scaffold. Let&#8217;s create a scaffold User with edit and view actions.</p>
<p style="padding-left: 60px;">Eg:  rails g scaffold User edit view</p>
<ul>
<li>rails generate migration AddNewTable</li>
</ul>
<p style="padding-left: 60px;">Generates Table to migrate. We can create migration for adding a table as</p>
<p style="padding-left: 60px;">Eg:  rails g migration User</p>
<ul>
<li>rails generate plugin PluginName</li>
</ul>
<p style="padding-left: 60px;">Generates Plugin.</p>
<p style="padding-left: 60px;">Eg:  rails g plugin rails_plugin</p>
<ul>
<li>rails generate integration_test TestName</li>
</ul>
<p style="padding-left: 60px;">Generates Integration Test.</p>
<p style="padding-left: 60px;">Eg:  rails generate integration_test User</p>
<ul>
<li>rails generate session_migration</li>
</ul>
<p style="padding-left: 60px;">Generates Session Migration.</p>
<h2 id="creating-generators-with-generators">Creating Generators with Generators</h2>
<p>Generators themselves have a generator:</p><pre class="crayon-plain-tag">$ rails generate generator initializer
 create lib/generators/initializer
 create lib/generators/initializer/initializer_generator.rb
 create lib/generators/initializer/USAGE
 create lib/generators/initializer/templates</pre><p>This is the generator just created:</p><pre class="crayon-plain-tag">class InitializerGenerator &lt; Rails::Generators::NamedBase
  source_root File.expand_path("../templates", __FILE__)
end</pre><p></p>
<p class="">First, notice that we are inheriting from <tt>Rails::Generators::NamedBase</tt> instead of <tt>Rails::Generators::Base</tt>. This means that our generator expects at least one argument, which will be the name of the initializer.</p>
<h2>Customizing Rails generators</h2>
<p>We can customize it in, <code>config/application.rb</code></p><pre class="crayon-plain-tag">config.generators do |g|
  g.orm :active_record
  g.template_engine :erb
  g.test_framework :test_unit, fixture: false
  g.stylesheets false
  g.javascripts false
end</pre><p>So by doing the above steps will stop generating stylesheet, JavaScript, and test fixture files. We can avoid generation of unwanted files from doing these steps.</p>
<p>I hope this article help you in some way to know about rails generators.</p>
<h2>References</h2>
<ul>
<li><a href="https://learn.co/lessons/rails-generators-readme">https://learn.co/lessons/rails-generators-readme</a></li>
<li><a href="https://www.tutorialspoint.com/ruby-on-rails/rails-generators.htm">https://www.tutorialspoint.com/ruby-on-rails/rails-generators.htm</a></li>
<li><a href="http://www.agmprojects.com/blog/building-a-rails-generator-and-packing-it-into-a-gem">http://www.agmprojects.com/blog/building-a-rails-generator-and-packing-it-into-a-gem</a></li>
</ul>
<p>The post <a rel="nofollow" href="/rails-generators/">Rails Generators</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/rails-generators/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>How we made our rspec test suite to run 2x faster</title>
		<link>/made-rspec-test-suite-run-2x-faster/</link>
				<comments>/made-rspec-test-suite-run-2x-faster/#comments</comments>
				<pubDate>Fri, 01 Sep 2017 09:24:27 +0000</pubDate>
		<dc:creator><![CDATA[tony]]></dc:creator>
				<category><![CDATA[Rails]]></category>
		<category><![CDATA[RSpec]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[testing]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3040</guid>
				<description><![CDATA[<p>&#160; &#8220;Why on earth is my test suite taking so long to run?&#8221; If you are a developer, you might have asked this question at least once to yourself. So did we, our rails project&#8217;s test suite was taking a good 1 hour 30 minutes to run and we wanted to improve that time so&#8230;</p>
<p>The post <a rel="nofollow" href="/made-rspec-test-suite-run-2x-faster/">How we made our rspec test suite to run 2x faster</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>&nbsp;</p>
<p>&#8220;<i>Why on earth is my test suite taking so long to run?</i>&#8221;</p>
<p>If you are a developer, you might have asked this question at least once to yourself. So did we, our rails project&#8217;s test suite was taking a good 1 hour 30 minutes to run and we wanted to improve that time so badly that we eventually did exactly that, reducing nearly 1 and half hours to just minutes, and this is how we did it.</p>
<h2>1. Database independent tests</h2>
<p>DB operations are often time-consuming and most of the time we can do away with saving objects to the database to run our tests.</p>
<p>Use test doubles, stubs and mocks instead of creating the real instance of a class and invoking methods on the created instance.</p>
<div>
<pre class="crayon-plain-tag">class Student &lt; ActiveRecord::Base
  .
  .
  def name
    first_name +" "+ last_name
  end
end</pre><br />
Our test case</p>
</div>
<div>
<div>
<pre class="crayon-plain-tag">describe Student do
  let (:student) {create(:student, first_name: 'Red', last_name: 'Panther')}
  it 'should return name' do
    student.name.should == 'Red Panther'
  end
end</pre><br />
This test can be made faster by replacing</p>
</div>
<div>
<pre class="crayon-plain-tag">let(:student) {create(:student, first_name: 'Red', last_name: 'panther')}</pre><br />
with</p>
<div>
<pre class="crayon-plain-tag">let(:student) {build_stubbed(:student, first_name: 'Red', last_name: 'Panther')</pre></p>
<h2>2) Use gem group</h2>
</div>
<p>Rails preload your gems before running tests. Using gem groups allow rails to load only the environment specific dependencies.</p>
<div><b>#Gemfile</b></div>
<div>
<pre class="crayon-plain-tag">group: production do
  gem 'activemerchent'
end

group :test, : development do
  gem 'capybara'
  gem 'rspec-rails'
  gem 'byebug'
end</pre></p>
<h2><b>3) Use <code>before(:each)</code> and <code>before(:all)</code> hooks carefully</b></h2>
</div>
<p>Since <code>before(:each)</code> runs for every test, be careful what we include inside <code>before(:each)</code> hook. If the code inside <code>before(:each)</code> is slow every single test in your file is going to be slow.</p>
<p>A workaround would be to refactor the code to have fewer dependencies or move them to a <code>before(:all)</code> block which runs only once.</p>
<p>Let&#8217;s say you have</p>
<div>
<pre class="crayon-plain-tag">before(:each) do
  @article = create(:article)
  @author = create(:author)
end</pre><br />
moving them to a <code>before(:all)</code> block</p>
</div>
<div>
<pre class="crayon-plain-tag">before(:all) do
  @article = create(:article)
  @author = create(:author)
end</pre><br />
Should save you some time but with some drawbacks of its own, for example, the objects <code>@article</code> and <code>@author</code> are not recreated for each test as they in <code>before(:all)</code> block which means any test case that changes the attributes of these objects might affect the result of other following tests.</p>
</div>
<h2>4. Use <code>build_stubbed</code> Instead of <code>build</code></h2>
<p>FactoryGirl.build is not suitable when we want our instance to behave as though it is persisted. In this scenario instead of creating a real class instance, we can use <code>build_stubbed</code> which makes the instance to behave as it is persisted by assigning an id.</p><pre class="crayon-plain-tag">FactoryGirl.build_stubbed(:student)</pre><p>Also note that when we build instance using <code> .build</code> it calls .create on the associated models, where as .build_stubbed calls nothing but .build_stubbed also on associated models as well.</p>
<h2>5. Running tests parallelly</h2>
<p><a href="https://github.com/grosser/parallel_tests">parallel_tests</a> is a gem that allows us to run tests across multiple CPU cores. A very important thing to take into account when running tests in parallel is to make sure that the tests are independent of each other. Even though parallel_tests uses one database per thread, if there are any shared state between tests that live outside the DB such as Elastic search or Apache solar those dependencies should be taken into account when writing tests.</p>
<h2>6. Use continuous integration</h2>
<p>As our test suite grew into 3k test cases, it was no longer viable to run the entire suite on our local machines. That&#8217;s when we felt the urgency to switch to a CI. We chose <a href="https://circleci.com/">Circle CI</a> which supports parallel builds. We split out tests into multiple virtual machines that run parallelly and it was a huge win for us in terms of test times. Our developers wrote the code and pushed to the repo and the CI took care of the rest. Few popular CI tools are</p>
<p>1) <a href="https://travis-ci.org/">Trvis CI</a><br />
2) <a href="https://jenkins.io/">Jenkins</a><br />
3) <a href="https://circleci.com/">CircleCI</a><br />
4) <a href="https://codeship.com/">Codeship</a></p>
<p>Automated tests with continuous integration also enhance code quality.</p>
<h2>7. Database cleaner</h2>
<p>We observed an increase in speed after tweaking our database_cleaner strategies a little bit.</p>
<p>To start with, include gem database_cleaner in gemfile.</p>
<p>Inside a separate file <code>spec/support/database_cleaner.rb</code>,</p>
</div>
<div>
<div id="crayon-597801c40a13b848772980-1" class="crayon-line">
<pre class="crayon-plain-tag">RSpec.configure do |config|
 
  config.before(:suite) do
    DatabaseCleaner.clean_with(:truncation)
  end
 
  config.before(:each) do
    DatabaseCleaner.strategy = :transaction
  end
 
  config.before(:each) do
    DatabaseCleaner.start
  end
 
  config.after(:each) do
    DatabaseCleaner.clean
  end
 
end</pre></p>
<ul>
<li> This will clear the test database out completely before the entire test suite runs.</li>
<li> Sets the default database cleaning strategy to be transactions, which are very fast.</li>
<li> <code>DatabaseCleaner.start</code> and <code>DatabaseCleaner.clean</code> hook up database_cleaner when each test begins and ends.</li>
</ul>
</div>
</div>
</div>
<h2>References</h2>
<ul>
<li><a href="https://github.com/grosser/parallel_tests">https://github.com/grosser/parallel_tests</a></li>
<li><a href="https://github.com/thoughtbot/factory_girl">https://github.com/thoughtbot/factory_girl</a></li>
<li><a href="https://circleci.com/">https://circleci.com/</a></li>
<li><a href="https://github.com/DatabaseCleaner/database_cleaner">https://github.com/DatabaseCleaner/database_cleaner</a></li>
</ul>
<div></div>
<p>The post <a rel="nofollow" href="/made-rspec-test-suite-run-2x-faster/">How we made our rspec test suite to run 2x faster</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/made-rspec-test-suite-run-2x-faster/feed/</wfw:commentRss>
		<slash:comments>9</slash:comments>
							</item>
		<item>
		<title>Concurrent-Ruby</title>
		<link>/concurrent-ruby/</link>
				<comments>/concurrent-ruby/#comments</comments>
				<pubDate>Thu, 31 Aug 2017 13:14:13 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Rails]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1669</guid>
				<description><![CDATA[<p>Concurrent-ruby is a gem that was brought my attention during Anil Wadghule&#8217;s talk in RubyConf India 2017. Concurrency is the ability of a program to make progress on a task that is spread out over different slices of time. It allows us to run multiple “threads” at the same time. As one thread may be sleeping or&#8230;</p>
<p>The post <a rel="nofollow" href="/concurrent-ruby/">Concurrent-Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p><a href="http://blog.redpanthers.co/wp-content/uploads/2017/02/concurrent-ruby-logo-300x300.png"><img class="aligncenter wp-image-1674 size-full" title="Concurrent Ruby" src="http://blog.redpanthers.co/wp-content/uploads/2017/02/concurrent-ruby-logo-300x300.png" alt="Concurrent Ruby" width="300" height="300" /></a></p>
<p>Concurrent-ruby is a gem that was brought my attention during Anil Wadghule&#8217;s <a href="https://www.youtube.com/watch?v=K8c-gfUcnZA">talk</a> in <a href="http://rubyconfindia.org/">RubyConf India 2017</a>.</p>
<p>Concurrency is the ability of a program to make progress on a task that is spread out over different slices of time. It allows us to run multiple “threads” at the same time. As one thread may be sleeping or waiting on I/O, another thread may take priority and start working, thus making optimal use of available CPU time. When you think of concurrency, think of “threads”.</p>
<p>Modern concurrency tools include agents, futures, promises, thread pools actors, supervisors etc.Concurrent Ruby makes the strongest thread safety guarantees of any Ruby concurrency library. Every abstraction in this library is thread safe. Similarly, all are deadlock free and many are fully lock free.</p>
<h2>Concurrency Abstractions</h2>
<ul>
<li><strong>Async </strong>(<strong>Concurrent::Async</strong>): A mixin module that provides simple asynchronous behavior to a class, turning it into a simple actor.</li>
<li><strong>Future</strong> (<strong>Concurrent::Future</strong>): An asynchronous operation that produces a value. It represents a promise to complete an action at some time in the future.
<ul>
<li><strong>Dataflow</strong>: Built on Futures, Dataflow allows you to create a task that will be scheduled when all of its data dependencies are available.</li>
</ul>
</li>
<li><strong>Promise </strong>(<strong>Concurrent::Promise)</strong>: Similar to Futures, with more features. It represents the eventual value returned from the single completion of an operation.</li>
<li><strong>ScheduledTask</strong> (<strong>Concurrent::ScheduledTask):</strong> Like a Future scheduled for a specific future time.</li>
<li><strong><strong>TimerTask (</strong></strong><strong>Concurrent::TimerTask</strong><strong>)</strong>: A Thread that periodically wakes up to perform work at regular intervals.</li>
</ul>
<h2>Installation</h2>
<div class="highlight highlight-source-shell">
<pre class="crayon-plain-tag">gem install concurrent-ruby</pre>
</div>
<p>or add the following line to Gemfile:</p>
<div class="highlight highlight-source-ruby">
<pre class="crayon-plain-tag">gem 'concurrent-ruby', require: 'concurrent'</pre>
</div>
<p>and run <strong><em>bundle install</em></strong> from your shell.</p>
<h2>Edge Gem Installation</h2>
<p>It is a submodule for unstable, highly experimental features that are likely to change often and which may never become part of the core gem. Also for new, experimental version of abstractions already in the core gem.</p>
<p>The Edge gem must be installed separately from the core gem:</p>
<div class="highlight highlight-source-shell">
<pre class="crayon-plain-tag">gem install concurrent-ruby-edge</pre>
</div>
<p>or add the following line to Gemfile:</p>
<div class="highlight highlight-source-ruby">
<pre class="crayon-plain-tag">gem 'concurrent-ruby-edge', require: 'concurrent-edge'</pre>
</div>
<p>and run <code>bundle install</code> from your shell.</p>
<h2>Usage</h2>
<p>Everything within this gem can be loaded simply by requiring it:</p>
<div class="highlight highlight-source-ruby">
<pre class="crayon-plain-tag">require 'concurrent'</pre>
</div>
<p>To use the tools in the Edge gem it must be required separately:</p>
<div class="highlight highlight-source-ruby">
<pre class="crayon-plain-tag">require 'concurrent-edge'</pre>
</div>
<p>Eg:</p><pre class="crayon-plain-tag">require 'concurrent-edge'

class Hello
  def greet
    sleep 3
    "Hello, #{Time.now}"
  end
end

all_promises = Concurrent::Promises.zip(
  Concurrent::Promises.future { Hello.new.greet },
  Concurrent::Promises.future { Hello.new.greet }
)

all_promises.then { |*values| puts values.inspect }.value</pre><p>In the above code, it displays greetings. And all these runs concurrently. Here we are using <em>concurrent-edge.</em> It shows the answer as:</p><pre class="crayon-plain-tag">Hello, 2016-12-09 08:56:51 +0530
Hello, 2016-12-09 08:56:54 +0530</pre><p>So generally, the gen concurrent-ruby guarantees thread safety and deadlock free. Also, we can manage CPU time using threads in concurrency.</p>
<h2>References</h2>
<ul>
<li><a href="https://github.com/ruby-concurrency/concurrent-ruby">https://github.com/ruby-concurrency/concurrent-ruby</a></li>
<li><a href="https://blog.engineyard.com/2013/ruby-concurrency">https://blog.engineyard.com/2013/ruby-concurrency</a></li>
<li><a href="https://github.com/ruby-concurrency/concurrent-ruby/blob/master/doc/thread_pools.md">https://github.com/ruby-concurrency/concurrent-ruby/blob/master/doc/thread_pools.md</a></li>
</ul>
<p>The post <a rel="nofollow" href="/concurrent-ruby/">Concurrent-Ruby</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/concurrent-ruby/feed/</wfw:commentRss>
		<slash:comments>2</slash:comments>
							</item>
		<item>
		<title>Custom Loggers</title>
		<link>/custom-loggers/</link>
				<comments>/custom-loggers/#respond</comments>
				<pubDate>Thu, 24 Aug 2017 11:03:57 +0000</pubDate>
		<dc:creator><![CDATA[anjana]]></dc:creator>
				<category><![CDATA[Rails]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=1614</guid>
				<description><![CDATA[<p>Custom loggers are useful if you wish to have a separate log file for different moving parts of your Rails application. This would make your logging more efficient and readable. (Eg: a file to record all the API request you received). Let&#8217;s have a look on them! Note: This could cause an issue of log files&#8230;</p>
<p>The post <a rel="nofollow" href="/custom-loggers/">Custom Loggers</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Custom loggers are useful if you wish to have a separate log file for different moving parts of your Rails application. This would make your logging more efficient and readable. (Eg: a file to record all the API request you received). Let&#8217;s have a look on them!</p>
<p>Note: This could cause an issue of log files growing and consuming the entire space in the hard disk can be managed by configuring Rails application. It is described in our previous article <em><strong><a href="http://blog.redpanthers.co/enable-log-rotation-within-rails-application/">Enable log rotation within the rails application</a>.</strong></em></p>
<p>Rails make use of ActiveSupport::Logger class to write log information. It is used to output message and has associated levels. You can then give the <a href="https://ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html">Logger</a> a level, and only messages at that level or higher will be printed. They are:</p>
<table style="height: 180px;" width="617">
<tbody>
<tr>
<td>UNKNOWN</td>
<td>An unknown message that should always be logged.</td>
</tr>
<tr>
<td>FATAL</td>
<td>An un-handleable error that results in a program crash.</td>
</tr>
<tr>
<td>ERROR</td>
<td>A handleable error condition.</td>
</tr>
<tr>
<td>WARN</td>
<td>A warning.</td>
</tr>
<tr>
<td>INFO</td>
<td>Generic (useful) information about system operation.</td>
</tr>
<tr>
<td>DEBUG</td>
<td>Low-level information for developers.</td>
</tr>
</tbody>
</table>
<h2>CREATE YOUR CUSTOM LOGGER</h2>
<p></p><pre class="crayon-plain-tag"># lib/custom_logger.rb
class CustomLogger &lt; Logger
  def format_message(severity, timestamp, progname, msg)
    "#{msg}\n"
  end
end
logfile = File.open(RAILS_ROOT + '/log/custom.log', 'a') #create log file
logfile.sync = true #automatically flushes data to file
CUSTOM_LOGGER = CustomLogger.new(logfile) #constant accessible anywhere</pre><p>It creates a custom_logger.rb file. Here defines the format for log messages. The arguments are:</p>
<ul>
<li>Severity of the log message</li>
<li>Time instance representing when the message was logged</li>
<li>progname configured or passed to the logger method</li>
<li><em>Object</em> the user passed to the log message.</li>
</ul>
<h2>LOAD CUSTOMLOGGER FROM ENVIRONMENT</h2>
<p>Then load that custom logger in development as:</p><pre class="crayon-plain-tag">#in any controller, view or model like,
CUSTOM_LOGGER.info("info from custom logger")
CUSTOM_LOGGER.add(Logger::FATAL) { 'Fatal error!' }
CUSTOM_LOGGER.fatal("Some arguments are not given.")
CUSTOM_LOGGER.error ("Argument #{@name} mismatch." )
CUSTOM_LOGGER.debug("This is a " + potentially + " expensive operation")</pre><p>I hope this will help you to know about Custom Loggers.</p>
<h2>References</h2>
<ul>
<li><a href="https://ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html">https://ruby-doc.org/stdlib-2.1.0/libdoc/logger/rdoc/Logger.html</a></li>
</ul>
<p>The post <a rel="nofollow" href="/custom-loggers/">Custom Loggers</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/custom-loggers/feed/</wfw:commentRss>
		<slash:comments>0</slash:comments>
							</item>
		<item>
		<title>Make unit tests great again &#8211; Integrate Jasmine into Rails</title>
		<link>/write-beautiful-jasmine-tests-rails/</link>
				<comments>/write-beautiful-jasmine-tests-rails/#comments</comments>
				<pubDate>Tue, 22 Aug 2017 07:28:43 +0000</pubDate>
		<dc:creator><![CDATA[alan]]></dc:creator>
				<category><![CDATA[Jasmine]]></category>
		<category><![CDATA[Javascript]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[Rails 5]]></category>
		<category><![CDATA[Ruby]]></category>
		<category><![CDATA[Ruby 2.4]]></category>
		<category><![CDATA[better tests]]></category>
		<category><![CDATA[jasmine]]></category>
		<category><![CDATA[karma]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[test]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=3149</guid>
				<description><![CDATA[<p>Jasmine is a framework to write tests for the Javascript code in the Behaviour Driven Development (BDD) style. In this article, you will learn how to integrate Jasmine into your existing rails application and how to write clean and beautiful unit tests. Let us make tests great again! &#160; Install Jasmine To make Jasmine available&#8230;</p>
<p>The post <a rel="nofollow" href="/write-beautiful-jasmine-tests-rails/">Make unit tests great again &#8211; Integrate Jasmine into Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Jasmine is a framework to write tests for the Javascript code in the Behaviour Driven Development (BDD) style. In this article, you will learn how to integrate Jasmine into your existing rails application and how to write clean and beautiful unit tests. Let us make tests great again!</p>
<p>&nbsp;</p>
<h2>Install Jasmine</h2>
<p>To make Jasmine available to your Rails app, you just have to place the jasmine-gem (<a href="https://github.com/jasmine/jasmine-gem">link</a>) in your Gemfile. That will do the magic. Just make sure you have it under Development and Test group in the Gemfile as follows:</p><pre class="crayon-plain-tag">group :development, :test do
  gem "jasmine"
end</pre><p>Then run this to install the gem:</p><pre class="crayon-plain-tag">bundle install</pre><p>After all the gems are installed, run this code to generate necessary files for Jasmine to run:</p><pre class="crayon-plain-tag">rails generate jasmine:install</pre><p>This will create the jasmine helper file and the yml file where you configure how it should run the tests.</p>
<h2>Run tests</h2>
<p>You can use Jasmine right after it&#8217;s installed. It can be run in several ways, the most important ones being,</p>
<ol>
<li>In your browser</li>
<li>Continuous Integration Mode (CI)</li>
</ol>
<p>The CI mode is usually used when you have to integrate it into your build system.</p>
<h2>Browser Mode</h2>
<p>You have to start the Jasmine server to run it in a browser. This server runs all the tests and serves the results to a webpage. Run this to start the Jasmine Server:</p><pre class="crayon-plain-tag">rake jasmine</pre><p>With the default settings, you can view the output in:</p><pre class="crayon-plain-tag">http://localhost:8888/</pre><p>But this page would be pretty empty since you don&#8217;t have any tests written for your Javascript code. There is a method provided to generate sample tests. Try running this:</p><pre class="crayon-plain-tag">rails generate jasmine:examples</pre><p>Now refresh the webpage and you can see something similar to this:</p>
<p><a href="https://blog.redpanthers.co/wp-content/uploads/2017/08/Screen-Shot-2017-08-21-at-3.47.22-PM.png"><img class="aligncenter wp-image-3152" src="https://blog.redpanthers.co/wp-content/uploads/2017/08/Screen-Shot-2017-08-21-at-3.47.22-PM-300x91.png" alt="Jasmine test page" width="768" height="233" /></a></p>
<h3>Configurable Settings</h3>
<p>Clicking on the options button in the top right corner will display a list of options that change how Jasmine runs the tests. Let&#8217;s get into each one of them:</p>
<h4>Raise Exceptions</h4>
<p>This option disables the error catching mechanism of Jasmine in the JavaScript source code and in the test file. The default setting is to wrap all the errors in a catch block.</p>
<h4>Stop Spec on Expectation Failure</h4>
<p>With this option turned on, Jasmine will stop the test at the first occurrence of an error. The default setting is to run the full test suit and then display all the tests which fail.</p>
<h4>Run Tests in Random Order</h4>
<p>This option enables the test to be run in a random sequence every time the test runs. The benefit of enabling this option is to reveal dependencies between tests, therefore, you can reduce test dependencies and each test will have good isolation.</p>
<h2>Continous Integration Mode</h2>
<p>A headless browser is used to integrate Jasmine into your continuous integration workflow. To make our lives easier, this gem that we are using supports integration with a headless browser out of the box. The default headless browser is <a href="http://phantomjs.org/">Phantom JS</a>. So it will download automatically if not installed when you try to run in CI mode. Run this code to run in CI mode:</p><pre class="crayon-plain-tag">rake jasmine:ci</pre><p>By default, Jasmine will attempt to find a random open port. To set a default port manually, just add this to the <strong>jasmine_helper.rb</strong></p><pre class="crayon-plain-tag">Jasmine.configure do |config|
   config.ci_port = 1234
end</pre><p></p>
<h2>Configuration</h2>
<p>The two files which you should be looking into, if you need to alter the behavior of tests are:</p>
<ul>
<li>jasmine.yml</li>
<li>jasmine_helper.rb</li>
</ul>
<p>Jasmine reads the jasmine.yml first and then overrides it with the settings mentioned in jasmine_helper.rb</p>
<h4>Sample configuration:</h4>
<p></p><pre class="crayon-plain-tag"># spec/javascripts/support/jasmine.yml
random: true
show_console_log: false
stop_spec_on_expectation_failure: true</pre><p></p><pre class="crayon-plain-tag"># spec/javascripts/support/jasmine_helper.rb
Jasmine.configure do |config|
  config.random = false
  config.show_console_log = false
  config.stop_spec_on_expectation_failure: false

  config.show_full_stack_trace = false
  config.prevent_phantom_js_auto_install = false
end</pre><p></p>
<h2>Testing</h2>
<p>Writing tests for Javascript in a Rails app should be fairly straightforward as it uses same standards as Jasmine in general. But there are things that need to be considered specific to a Jasmine installation in Rails.</p>
<h3>Testing JavaScript</h3>
<p>Test files for JavaScript in a rails application reside in the <strong>spec/javascripts</strong> folder. For each javascript file, you need to put the test file in the same path as the file. For example, if you have the following javascript file in your app:</p>
<p><strong>app/assets/javascripts/jasmine_examples/Calculator.js</strong></p>
<p>You place the spec file in the following path:</p>
<p><strong>spec/javascripts/jasmine_examples/CalculatorSpec.js</strong></p>
<p>Jasmine will include the test on the next test run. There is no configuration to have your test run.</p>
<h2>Plugins worth considering</h2>
<ul>
<li><strong>Jasmine-Jquery</strong> &#8211; this plugin provides a lot of jquery related matchers. Download it <a href="https://github.com/velesin/jasmine-jquery/releases">here</a></li>
<li><strong>Jasmine-Matchers</strong> &#8211; a tool to provide additional matchers. Download it <a href="https://github.com/JamieMason/Jasmine-Matchers/releases">here</a></li>
<li><strong>Jasmine-Fixture &#8211; </strong>a plugin that provides DOM creation using CSS selectors, therefore you can interact with the DOM much easier. Download it <a href="https://github.com/searls/jasmine-fixture/releases">here</a></li>
</ul>
<h1>Write Beautiful Unit tests</h1>
<p>95% of the developers I know write unit tests in order to prevent defects from being deployed to production. But the essential ingredients to a great unit test is unknown to most of them. There have been countless times that I&#8217;ve seen a test fails, only to investigate and discover that I have no idea what feature the developer was trying to test, let alone how it went wrong or why it matters.</p>
<h2>Importance of Test Discipline</h2>
<p>Your tests are the best set of weapons to defend your code from bugs. They are more important that linting and static analysis. A few reasons why tests are your secret weapon:</p>
<ul>
<li>Writing tests first gives you a clearer perspective on the ideal API design.</li>
<li>Does the developer understand the problem enough to articulate in code all critical component requirements?</li>
<li>Manual QA is error-prone. In my experience, it’s impossible for a developer to remember all features that need testing after making a change to refactor, add new features, or remove features.</li>
<li>Continous Integration prevents failed builds from getting deployed to production.</li>
</ul>
<h2>Bug Report vs plain Unit Test</h2>
<p>The test fail report comes to save your life when a test fails. So you better make it loud and clear. I came up with a list of must-have info in your bug report.</p>
<ul>
<li>What are you trying to test?</li>
<li>What should it do?</li>
<li>What is the real-time output (actual behavior)?</li>
<li>What is the expected output (expected behavior)?</li>
</ul>
<p>Here is a sample test with all of these info:</p><pre class="crayon-plain-tag">describe("CalculatorAddMethod", function() {

  var calculator = new Calculator();

  it("should return number", function() {
    const actual = typeof Calculator.add(5,10);
    const expected = 'number'
    expect(actual).toEqual(expected);
  });

});</pre><p>This test suit answers all the questions above. Let&#8217;s go through each one of them.</p>
<ul>
<li>What are you trying to test?
<ul>
<li>-&gt; Go for the test description. It is testing for the return type of the add method of Calculator().</li>
</ul>
</li>
<li>What should it do?
<ul>
<li>-&gt; Again, look at the test description. It clearly says that it is testing for the return type of add method.</li>
</ul>
</li>
<li>What is the actual output?
<ul>
<li>-&gt; There is a dedicated variable which holds the actual result and how you got the actual result. TWO FOR ONE!</li>
</ul>
</li>
<li>What is the expected output?
<ul>
<li>-&gt; Again, there is a dedicated variable which holds the actual result. Straight as a ruler!</li>
</ul>
</li>
</ul>
<h2>Make your tests even better</h2>
<p>This is from my experiences and the knowledge I gained from good articles. This worked for me in the long run even if I find it a little difficult to implement when I started. <strong>Write every single test using toEqual()</strong>. Don&#8217;t worry about the quality impact on your test suit. It will get better with exercise.</p>
<h2>Easter Egg</h2>
<p>This method I suggested would answer one more question, which is by far the most important question I guess. <strong>How can you reproduce the test?</strong> The <strong>const actual </strong>holds the answer to this question. Please go take a look at the variable in my sample test suit above and get delighted.</p>
<h1>Conclusion</h1>
<p>Integrating Jasmine into your Rails app is done by the <strong>jasmine-gem. </strong>This gem gives you the ability to run tests in a browser or as Continous Integration mode. The usage of right plugins will improve your productivity and helps you write tests faster and better.</p>
<p>Next time you write a test, remember to see if your test answers the following questions:</p>
<ul>
<li>What are you trying to test?</li>
<li>What should it do?</li>
<li>What is the real-time output (actual behavior)?</li>
<li>What is the expected output (expected behavior)?</li>
<li>How can be the test reproduced?</li>
</ul>
<p>The post <a rel="nofollow" href="/write-beautiful-jasmine-tests-rails/">Make unit tests great again &#8211; Integrate Jasmine into Rails</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/write-beautiful-jasmine-tests-rails/feed/</wfw:commentRss>
		<slash:comments>1</slash:comments>
							</item>
		<item>
		<title>to_json vs as_json in Rails API</title>
		<link>/to_json-vs-as_json-in-rails-api/</link>
				<comments>/to_json-vs-as_json-in-rails-api/#comments</comments>
				<pubDate>Wed, 14 Jun 2017 10:58:30 +0000</pubDate>
		<dc:creator><![CDATA[rajana]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Rails]]></category>
		<category><![CDATA[Ruby]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=2694</guid>
				<description><![CDATA[<p>Recently we have been working on Rails API. During that time, we were curious about the difference between as_json and to_json. In this article, we are sharing the difference we learned. to_json in Rails API Let&#8217;s discuss how we started out building our APIs using &#8216;to_json’. to_json will return JSON string representing the hash. Option&#8230;</p>
<p>The post <a rel="nofollow" href="/to_json-vs-as_json-in-rails-api/">to_json vs as_json in Rails API</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>Recently we have been working on Rails API. During that time, we were curious about the difference between as_json and to_json. In this article, we are sharing the difference we learned.</p>
<h2><strong>to_json in Rails API</strong></h2>
<p>Let&#8217;s discuss how we started out building our APIs using &#8216;to_json’. to_json will return JSON string representing the hash. Option are passed to each element.</p>
<p>In to_json without any <em>option,  </em>the returned JSON string will include all the model attributes</p><pre class="crayon-plain-tag">user = User.find(1)
user.to_json</pre><p>to_json had some great options of ActiveRecord objects. We could just tell the method to only render certain attributes, or to include association or method calls. We had:</p>
<ul>
<li>only &#8211; Only show column names in the output as specified in the list<br />
<pre class="crayon-plain-tag">user.to_json(:only =&gt; [ :id, :email ])</pre>
</li>
<li>except &#8211; Show all column names except the ones specified in the list<br />
<pre class="crayon-plain-tag">user.to_json(:except =&gt; [:id, :username])</pre>
</li>
</ul>
<p>to_json works fine and seamlessly ok, as long as the database schema is deeply coupled with the API output.When it takes the next level where we want to render a certain attribute in json it start to break.</p><pre class="crayon-plain-tag">render :json =&gt; { :sucess =&gt; true,
  :user =&gt; @user.to_json(:only =&gt; [:name]) }</pre><p>This will start to generate a bit load to controllers. Such methods of generating json don&#8217;t feel quite right and begin to break down. This is because the to_json is interested in &#8216;serializing&#8217; a database object while most of the developers try to put relevant representation for their API.</p>
<p>Anytime to_json is called on an object, as_json is invoked to create the data structure, and then that hash is encoded as a JSON string using ActiveSupport::json.encode. This happens for all types: Object, Numeric, Data, String etc.</p>
<p>Now the creation of the json is separated from the rendering of the json.  as_json is used to create the structure of the json as a Hash, and the rendering of that hash into JSON string is left up-to ActiveSupport::json.encode.</p>
<h2><strong>as_json in Rails API</strong></h2>
<p>as_json Returns a hash representing the model. Like in to_json, option are passed to each element in as_json. The option include_root_in_json controls the top-level behavior of as_json. If true, as_json will emit a single root node named after the object’s type. The default value for include_root_in_json option is false. This behavior can also be achieved by setting the :root  option to true.</p><pre class="crayon-plain-tag">user.as_json(root: true)</pre><p>In as_json without any option, the returned HASH will include all the model attributes</p><pre class="crayon-plain-tag">user = User.find(1)
user.as_json</pre><p>The <em>:only</em> and <em>:except</em> options can be used to limit the attributes included, and work similar to the attributes method.</p><pre class="crayon-plain-tag">user.as_json(:only =&gt; [ :id, :email ])
user.as_json(:except =&gt; [:id, :username])</pre><p>Default as_json will create a hash which includes all the model attributes. We normally override the as_json to create custom JSON structure.</p><pre class="crayon-plain-tag">def as_json(options={})
 { :email =&gt; self.email }
end</pre><p><strong>As we were going through this we also came across a method called from_json. So we decided to write about it as well</strong></p>
<h2>from_json in Rails API</h2>
<p>from_json will sets the model attributes from a JSON string. The default value for include_root option is false. We can change it to &#8216;true&#8217; if the given JSON string includes a single root node.</p><pre class="crayon-plain-tag">json = { user: { email: 'adone@gmail.com', username: 'adone'} }.to_json
user = User.new
user.from_json(json, true)
user.email                 #=&gt; "adone@gmail.com"
user.username              #=&gt; "adone"</pre><p><code></code></p>
<p>Do not call to_json directly, and let the render take it, in controllers. Incase of custom structured or multi level JSON structure override as_json in the model or call as_json. Using as_json will help to worry one less.</p>
<h2><strong>References</strong></h2>
<ul>
<li><a href="https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/json.rb">https://github.com/rails/rails/blob/master/activesupport/lib/active_support/core_ext/object/json.rb</a></li>
<li><a href="http://ruby-doc.org/stdlib-2.0.0/libdoc/json/rdoc/Regexp.html">http://ruby-doc.org/stdlib-2.0.0/libdoc/json/rdoc/Regexp.html</a></li>
</ul>
<p>The post <a rel="nofollow" href="/to_json-vs-as_json-in-rails-api/">to_json vs as_json in Rails API</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/to_json-vs-as_json-in-rails-api/feed/</wfw:commentRss>
		<slash:comments>3</slash:comments>
							</item>
		<item>
		<title>Authorization with Pundit gem</title>
		<link>/authorization-with-pundit-gem/</link>
				<comments>/authorization-with-pundit-gem/#comments</comments>
				<pubDate>Mon, 12 Jun 2017 10:55:09 +0000</pubDate>
		<dc:creator><![CDATA[nimmy]]></dc:creator>
				<category><![CDATA[Beginners]]></category>
		<category><![CDATA[Rails]]></category>

		<guid isPermaLink="false">http://blog.redpanthers.co/?p=2636</guid>
				<description><![CDATA[<p>&#160; Security is an important aspect of application development. Two main components of security are Authentication (Who are you?) and Authorization (are you supposed to be here?). Authentication verifies the user&#8217;s identity while authorization verifies whether that user has access rights on certain resources to perform actions on them. Two popular gems for authorization in&#8230;</p>
<p>The post <a rel="nofollow" href="/authorization-with-pundit-gem/">Authorization with Pundit gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></description>
								<content:encoded><![CDATA[<p>&nbsp;</p>
<p>Security is an important aspect of application development. Two main components of security are Authentication (<em>Who are you?</em>) and Authorization (<em>are you supposed to be here?</em>). Authentication verifies the user&#8217;s identity while authorization verifies whether that user has access rights on certain resources to perform actions on them.</p>
<p>Two popular gems for authorization in the rails world are CanCanCan and Pundit, we at Red Panthers prefers pundit over CanCanCan we get to write Pure Ruby Objects and keep the logic for each part separate.</p>
<p>The gem CanCanCan isolates (encourages) all authorization logic into a single class. It is a drawback when the complexity of application increases. Pundit gem provides object oriented design patterns to build our own authorization system that meets project&#8217;s requirements. It enables us to keep the models and controllers free from authorization code and allows to keep the resource logic separately. This flexibility and simplicity of Pundit gem help to use it with ease.</p>
<h2>To start with Pundit</h2>
<p>Add Pundit gem to your gem file and run bundle install.</p><pre class="crayon-plain-tag">gem 'pundit'</pre><p>Integrate Pundit to Rails application by adding the following line to ApplicationController.</p><pre class="crayon-plain-tag">include Pundit</pre><p>If you run the Pundit&#8217;s generator as below, it will generate app/policies folder which contains application_policy.rb by default.</p>
<div class="highlight highlight-source-shell">
<pre class="crayon-plain-tag">rails g pundit:install</pre>
</div>
<p>Then restart the Rails server.</p>
<p>Base class policy looks like</p><pre class="crayon-plain-tag">#app/policies/application_policy.rb
class ApplicationPolicy
  attr_reader :user, :record

  def initialize(user, record)
    @user = user
    @record = record
  end

  #............

  def destroy?
    false
  end

  def scope
    Pundit.policy_scope!(user, record.class)
  end

  class Scope
    attr_reader :user, :scope

    def initialize(user, scope)
      @user = user
      @scope = scope
    end

    def resolve
      scope
    end
  end
end</pre><p></p>
<h2>Create policies</h2>
<p>Policy classes are the core of Pundit. In the app/policies folder, we can write our own policies. Each policy is a Ruby class. Each policy class should be named after a model they belong to, followed by the word Policy. For example, use CollectionPolicy for Collection model. Pundit can also be used without an associated model.</p>
<p>Pundit uses the current_user method to get the first argument in initialize method in ApplicationPolicy. But if current_user is not the method that should be invoked by Pundit, simply define a method in your controller.</p><pre class="crayon-plain-tag">def pundit_user
  User.find_by_other_means
end</pre><p>Logically, Pundit can be used outside controllers, for example, in custom services or in views.</p>
<p>Consider the following example.</p>
<p>In User model,</p><pre class="crayon-plain-tag">class User &lt; ApplicationRecord  
  has_many :collections, dependent: :destroy
end</pre><p>In Collection model,</p><pre class="crayon-plain-tag">class Collection &lt; ApplicationRecord  
  belongs_to :user
end</pre><p>A collection should be able to be deleted only by the user who created it.</p>
<p>So, let&#8217;s start by creating a new file collection_policy.rb in app/policies  that will store our policies that are specific to collections.</p>
<p>In this file, we define a class that inherits from the ApplicationPolicy class and we will integrate delete method for managing permissions for the delete action .</p><pre class="crayon-plain-tag">#app/policies/collection_policy.rb
class CollectionPolicy &lt; ApplicationPolicy
  def destroy?
    record.user == user
  end
end</pre><p>In our CollectionPolicy class we are overriding the delete? method originally declared in the ApplicationPolicy. There it simply returns false. We can override the methods in ApplicationPolicy class with our unique requirements since it&#8217;s intended to give a structure only.</p><pre class="crayon-plain-tag">record.user == user</pre><p>This states that, the only user that should be able to delete a collection is the user that created it. We can refactor this into their own method since it&#8217;s a better approach if other authorized users are needed to be added in future so that changes can be made easily in a single method instead of having to make the same changes in multiple places.</p>
<p>This is very explicit, clearly describing the intent of the program flow.</p>
<p>Definitely, we won&#8217;t be wondering, from where these record and user attributes are coming from. In ApplicationPolicy class we can see that they are set as read only attributes representing the object that we are adding authorization to, such as collection in our app and then the user. This is an instance of Pundit providing easy access to the items that we want to add authorization. If we add another policy class like CollectionPolicy then also we will be able to use very similar code like we are working with collections.</p>
<p>Now let&#8217;s move to CollectionsController . By using Pundit policies, a proper permission structure can be integrated to the delete action, which earlier had no protection from unauthorized HTTP requests.</p><pre class="crayon-plain-tag">class CollectionsController &lt; ApplicationController
  protect_from_forgery

  def create
    Collections::Create.call(collection_params, current_user)
    redirect_to root_url
  end

  def destroy
    collection = Collection.find(params[:id])
    authorize(collection, :destroy?)
    Collections::Delete.call(collection, current_user)
    redirect_to root_url
  end

  private

  def collection_params
    params.require(:collection).permit(:name)
  end
end</pre><p>The authorize method automatically assumes that Collection will have a corresponding CollectionPolicy class, and instantiates this class. It should call destroy? method on this instance of the policy. Passing a second argument to authorize method is optional here. It infers from the action name that it should call destroy? method on this instance of the policy. But second argument should be passed if it doesn&#8217;t match the action name.</p>
<h3>Policy without a corresponding model</h3>
<p>We can create &#8216;headless&#8217; policies that are not tied to any specific model. Such policies can be retrieved by passing a symbol.</p><pre class="crayon-plain-tag"># app/policies/website_policy.rb
class WebsitePolicy &lt; Struct.new(:user, :website)
  # ...
end</pre><p></p><pre class="crayon-plain-tag"># In controllers
authorize :website, :show?</pre><p></p><pre class="crayon-plain-tag"># In views
&lt;% if policy(:website).show? %&gt;
  &lt;%= link_to 'Website', website_path %&gt;
&lt;% end %&gt;</pre><p>Here a model or class named Website doesn&#8217;t exist. So WebsitePolicy is retrieved by passing a symbol. This is a headless policy.</p>
<h2>Pundit scopes</h2>
<p>In application_policy.rb, there is a scope class defined. It implements a method called resolve for filtering. We can inherit it from a base class and implement our own resolve method. In this example a scope is setup to allow users to view websites only if they have a link through collections.</p>
<p>Let&#8217;s consider three models: User, Website, and Collection</p>
<p>Collection belongs to User.</p>
<p>In WebsitePolicy,</p><pre class="crayon-plain-tag">class Scope &lt; Scope
  def resolve
    if user.admin?
      scope.all
    else
      scope.where(:company_id =&gt; user.collections.select(:website_id))
    end
  end
end</pre><p>In the websites_controller,</p><pre class="crayon-plain-tag">def index
  @websites = policy_scope(Website.includes(:company).all)
  authorize @websites
end</pre><p>Now we see only the websites where we have a collection.</p>
<h2>Exception handling</h2>
<p>By default, Pundit raises an exception when users attempt to access that which they are not authorized to. This situation can be handled in ApplicationController.</p><pre class="crayon-plain-tag">class ApplicationController &lt; ActionController::Base
  include Pundit
  protect_from_forgery with: :exception
  rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized

  def user_not_authorized
    flash[:alert] = 'You are not authorized to perform this action.'
    redirect_back(fallback_location: root_path)
 end
end</pre><p>We need to rescue the Pundit::NotAuthorizedError exception with a suitable method that tells how to handle it.</p>
<h2>Why Pundit?</h2>
<ul>
<li>Well suited to the service oriented architecture that&#8217;s popular for large Rails applications</li>
<li>Keep controllers skinny</li>
<li>Pundit policy objects are lightweight, adding authorization logic without as much overhead as CanCanCan</li>
<li>Emphasizes object-oriented design with discrete Ruby objects providing specialized services</li>
</ul>
<p>Therefore, as an application grows in complexity it&#8217;s always better to prefer Pundit for authorization.</p>
<h2>References</h2>
<ul>
<li><a href="https://github.com/elabs/pundit">Pundit Gem on Github</a></li>
<li><a href="https://github.com/RailsApps/rails-devise-pundit">Rails-Devise-Pundit</a></li>
</ul>
<p>&nbsp;</p>
<p>The post <a rel="nofollow" href="/authorization-with-pundit-gem/">Authorization with Pundit gem</a> appeared first on <a rel="nofollow" href="/">Red Panthers</a>.</p>
]]></content:encoded>
							<wfw:commentRss>/authorization-with-pundit-gem/feed/</wfw:commentRss>
		<slash:comments>6</slash:comments>
							</item>
	</channel>
</rss>
